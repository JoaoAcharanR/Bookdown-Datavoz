[["index.html", "Bookdown D&amp;A 1 Introducción", " Bookdown D&amp;A Jonatan Salazar 2022-06-08 1 Introducción "],["procesamiento-de-base-de-datos.html", " 2 Procesamiento de Base de Datos 2.1 Operadores de utilidad general 2.2 Manipulación de estructutura de bases de datos 2.3 Crear nuevas variables 2.4 Limpiar y renombrar variables 2.5 Reordenar variables 2.6 Recodificación de variables 2.7 Selección de variables 2.8 Filtrar casos 2.9 Bases de datos Long y Wide 2.10 Colapsar variables", " 2 Procesamiento de Base de Datos El presente capítulo tiene como objetivo registrar y explicar diversos códigos de utilidad para el procesamiento y limpieza de bases de datos. De esta manera, el capítulo se subdivide en diversas estrategias con las cuales el analista podrá enfrentarse a las bases de datos antes de comenzar con los procedimientos estadísticos. Dentro de cada subdivisión se encontrarán una serie de formas para realizar el mismo procedimiento, cubriendo así posibles errores y maximizando la utilidad de esta guía. 2.1 Operadores de utilidad general 2.1.1 1. Operadores relacionales Se usan para hacer comparaciones. Cuando en la Tabla 1 nos referimos a un valor, esto refiere tambien a variables Símbolo Función &lt; Un valor es menor que otro &gt; Un valor es mayor que otro == Un valor es igual que otro [^1] &lt;= Un valor es menor o igual que otro &gt;= Un valor es mayor o igual que otro != Un valor es distinto o diferente que otro %in% Un valor pertenece al conjunto designado [^2] is.na() El valor es perdido o NA !is.na() El valor es distinto de NA 2.1.2 2. Operadores aritméticos Realizan operaciones, como la suma, resta, división, entre otros. Símbolo Función + Suma - Resta * Multiplicación / División ^ Elevado 2.1.3 3. Operadores de asignación Hay dos formas de asignar objetoA &lt;- objetoB o objetoA = objetoB. Ambas implican que lo que se este realizando en el objetoB implica que eso va a producir o generar al objetoA 2.1.4 4. Operadores booleanos Describen relaciones lógicas o condicionales Estos operadores responden a la jerarquía según paréntesis Símbolo Función &amp; Indica un y lógico | Indica un o lógico xor() Excluye la condición ! Distinto de  any Ninguna de las condiciones serán utilizadas all Todas las condiciones serán ocupadas 2.1.5 5. Operador pipeline (%&gt;%) ¡Aquí mucha atención! Este operador %&gt;% (llamado pipe) no es un operador que este contenido en las funciones base del lenguaje R. Este operador proviene de la función magrittr de tidyverse, y es de los operadores más útiles y utilizados en R. ¿Para qué sirve? Para concatenar múltiples funciones y procesos. Imagina que quieres filtrar una base de datos a partir de tramos etarios. Pero no tienes esa variable creada. ¿Que hacer? La respuesta: concatenar el proceso de creación de variables y luego filtrar. Eso se puede hacer gracias a %&gt;% (ya mostraremos como utilizar esta herramienta), que por lo demás es muy fácil de ejecutar. Ctrl + shift + M Para Windows  + shift + M Para Mac 2.2 Manipulación de estructutura de bases de datos 2.2.1 Tipos de variables Antes de hacer cualquier cálculo con un nuevo conjunto de datos, es importante asegurarnos que nuestro dataframe se encuentre en óptimas condiciones y nuestras variables posean las características necesarias para realizar los análisis solicitados. Recordemos que en R trabajamos con los siguientes tipos de variables Tipo de dato Descripción Ejemplo integer Números enteros -1, 0, 1 numeric Números reales -0.5, 1/2, 1 character Texto palabra y Factor Categorías 1 = Mujer; 2 = Hombre logical Verdadero o falso TRUE, FALSE En relación a lo anterior, un problema que solemos observar al trabajar con R y RStudio es, por ejemplo, que nuestras variables numéricas estén codificadas como character, es decir, R considera esos valores como texto. Para solucionar este tipo de problemas utilizamos la coerción explícita, es decir, cambiamos la naturaleza de la variable a nuestra discreción. Para ello debemos, en primer lugar, consultar la estructura de datos. De esta forma evaluamos si el conjunto de variables, o una variable específica, requiere la aplicación de una coerción explícita. Existen diversas maneras de realizar este procedimiento, a través de R base o mediante librerías. 1. R Base # Para este ejemplo cargamos BBDD en el objeto df df &lt;- iris Consulta de estructura de datos para todo el dataframe str(df) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Como podemos observar, este código nos entrega un detallado informe sobre los tipos de datos que cuenta nuestro dataframe, indicando el nombre, su naturaleza y los valores que considera Consulta de estructura de dato para una variable específica # a) utilizamos la función str(), pero indicamos la variable de interés str(df$Petal.Length) ## num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... # b) la función class() nos arroja la naturaleza de lo que solicitamos. # Para este caso queremos saber la clase de la variable &quot;Species&quot; # alojada en nuestro dataframe class(df$Species) ## [1] &quot;factor&quot; Tal como expresan los resultados, la función str() se comporta de la misma manera que cuando se aplicó a todo el dataframe. En cambio la función class() solo nos entrega la naturaleza de la variable, sin otro tipo de información. En tal sentido, la variable Species es de tipo factor. 2. Librería Janitor Si bien la función str() funciona de manera correcta y nos entrega información precisa, muchas veces tal información no es de nuestra utilidad, pues solo buscamos saber la naturaleza de la variable, y ello sumado a que como analistas generalmente trabajamos con enormes BBDD, precisamos de alguna herramienta que únicamente nos entregue la información de interés. Para este caso existen otras funciones que se albergan en librerías de terceros, siendo Janitor una de ellas. # Cargamos la librería library(janitor) # Utilizamos la función compare_df_cols(). Esto nos entrega de manera # simplificada los tipos de datos de nuestro dataframe compare_df_cols(df) ## column_name df ## 1 Sepal.Length numeric ## 2 Sepal.Width numeric ## 3 Petal.Length numeric ## 4 Petal.Width numeric ## 5 Species factor 2.2.2 Coerción explícita Una vez identificamos las variables que no cumplen con nuestros requerimientos, procedemos a intervenirlas mediante coerción explícita. Transformar a variable numérica # evaluamos nuestras variables compare_df_cols(df) ## column_name df ## 1 Sepal.Length character ## 2 Sepal.Width numeric ## 3 Petal.Length numeric ## 4 Petal.Width numeric ## 5 Species factor Como observamos, la variable Sepal.Length es tipo character, no obstante, si obervamos nuestro dataframe, la variable debería ser de tipo numérica. Para corregir esta inconsistencia debemos usar la función as.numeric() y luego corroboramos que el cambio se haya realizado: # coerción explícita df$Sepal.Length &lt;- as.numeric(df$Sepal.Length) # comprobación class(df$Sepal.Length) ## [1] &quot;numeric&quot; Transformar a variable character # evaluamos nuestras variables compare_df_cols(df) ## column_name df ## 1 Sepal.Length numeric ## 2 Sepal.Width numeric ## 3 Petal.Length numeric ## 4 Petal.Width numeric ## 5 Species numeric En este caso, la variable Species es de tipo numérica, aun cuando se trata de respuestas de tipo texto. Para corregir la variable y transofrmarla a tipo texto, utilizamos la función as.character() # coerción explícita df$Species&lt;- as.character(df$Species) # comprobación class(df$Species) ## [1] &quot;character&quot; Transformar a variable factor En el paso anterior hemos convertido la variable a character, pero ¿qué ocurre si en el libro de códigos las categorías de esta variable se encuentran ligadas a un orden específico? Para resolver este tipo de situaciones utilizamos la función as.factor() y comprobamos su naturaleza # coerción explícita df$Species &lt;- as.factor(df$Species) # comprobación class(df$Species) ## [1] &quot;factor&quot; Ok, de acuerdo a nuestra evaluación hemos convertido la variable a tipo factor, ¿pero qué ocurre si le pedimos a R una tabla de frecuencias simple? table(df$Species) ## ## 1 2 3 ## 50 50 50 Tal como indica la tabla, la variable contiene únicamente los niveles en términos numéricos, no se encuentran asignadas a las categorías que representan. Si lo que queremos es convertir a factor y además indicar los nombres de las categorías, debemos utilizar la función factor(), pues esta función nos permite integrar otros argumentos de utilidad para completar la coerción. # Coerción. Para este caso convertimos la variable Species a factor # y además definimos las categorías con el argumento &quot;labels = &quot; df$Species &lt;- factor(df$Species, labels = c(&quot;setosa&quot;, &quot;versicolor&quot;, &quot;virginica&quot;)) # compbrobación class(df$Species) ## [1] &quot;factor&quot; # frecuencias simple table(df$Species) ## ## setosa versicolor virginica ## 50 50 50 De acuerdo a los resultados, hemos coercionado la variable a tipo factor y, además de ello, según lo expuesto la tabla de frecuencias simple, logramos asignar los niveles o categorías a la variable. Transformar a variable integer Por último, vamos a crear una nueva variable numérica que utilizaremos como identificador de la especie. Para este caso, al tratarse de un identificador, queremos establecer que contenga únicamente números enteros, debido a esto, haremos una coerción a variable integer. Primero creamos nuestra nueva variable que acturará como identificador de la especie. # utilizaremos las funciones presentes en tidyverse para crear nuestra nueva variable library(tidyverse) # construcción de nueva variable df &lt;- df %&gt;% mutate(Categoria = case_when(Species == &quot;setosa&quot; ~ 1, Species == &quot;versicolor&quot; ~ 2, Species == &quot;virginica&quot; ~ 3)) Ahora que tenemos nuestra variable, vamos a conertirla a una variable integer mediante coerción explícita utilizando la función as.integer. # Coerción. Para este caso convertimos la nueva variable a integer df$Categoria &lt;- as.integer(df$Categoria) # compbrobación class(df$Categoria) ## [1] &quot;integer&quot; 2.3 Crear nuevas variables Ahora que aprendimos los tipos de datos y cómo coercionarlos, podemos proceder a crear nuestras propias variables. Para ello, de igual manera que al consultar la estructura de datos, podemos utilizar R base o apoyarnos en librerías de terceros. 2.3.1 1. R Base # Para este ejemplo utilizaremos la base de datos mtcars que será almacenada en el objeto &quot;df&quot; df &lt;- mtcars Como primer ejercicio, crearemos la variable peso_kg, la cual corresponderá los pesos de los vehículos en kilogramos, ya que en la base original estos pesos vienen en libras. Para realizar este procedimiento debemos asignar el nombre de variable, seguido de la operación que queremos implementar en la variable. Para este caso, la transformación de libras a kilos, la cual se realiza multiplicando el peso el libras por mil, para luego dividirlo en dos. # creación de nueva variable df$peso_kg &lt;- (df$wt*1000)/2 # observamos nuestra nueva variable df %&gt;% select(wt, peso_kg) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-34426424{}.cl-3433ef2a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-34341626{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3434640a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3434640b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3434640c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} wtpeso_kg2.6201,310.02.8751,437.52.3201,160.03.2151,607.53.4401,720.03.4601,730.0 Como podemos apreciar, se ha creado la variable peso_kg de manera correcta. 2.3.2 2. Tidyverse Si bien R Base nos permite crear variables e integrarlas a nuestro conjunto de datos, existen librerías que nos proporcionan mayores opciones para crear nuestras variables. Este es el caso de tidyverse, donde podemos definir variables utilizando formatos condicionales, o incluso replicar la construcción de la variable peso_kg mediante la función mutate. # creación de peso_kg con sintaxis tidyverse df &lt;- df %&gt;% mutate(peso_kg = (wt*1000)/2) # observamos nuestra nueva variable df %&gt;% select(wt, peso_kg) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-34733dc4{}.cl-34653d82{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-34658b7a{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3466005a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3466005b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3466005c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} wtpeso_kg2.6201,310.02.8751,437.52.3201,160.03.2151,607.53.4401,720.03.4601,730.0 Continuando con el ejercicio anterior, y haciendo uso de esta librería, haremos una nueva variable que nos indique, según nuestros parámetros, cuando un auto es pesado, liviano o ni pesado ni liviano. Utilizaremos la función case_when para indicar nuestras condiciones. # creamos nuestra variable peso_text df &lt;- df %&gt;% mutate(peso_text = case_when(peso_kg &gt; 1800 ~ &quot;Pesado&quot;, peso_kg &lt; 1000 ~ &quot;Liviano&quot;, peso_kg &gt; 1000 &amp; peso_kg &lt; 1800 ~ &quot;Ni pesado, ni livano&quot;)) # observamos nuestras nuevas variables df %&gt;% select(peso_kg, peso_text) %&gt;% head() %&gt;% flextable(cwidth = 2) .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-349700f6{}.cl-348b2240{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-348b4932{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-348b4933{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-348b9720{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-348b9721{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-348b9722{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-348b9723{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-348b9724{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-348b9725{width:144pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} peso_kgpeso_text1,310.0Ni pesado, ni livano1,437.5Ni pesado, ni livano1,160.0Ni pesado, ni livano1,607.5Ni pesado, ni livano1,720.0Ni pesado, ni livano1,730.0Ni pesado, ni livano Al seleccionar nuestras nuevas variables podemos corroborar que tanto peso_kg como peso_text fueron creadas y almacenadas con éxito en nuestro conjunto de datos. Otra manera de hacer esto es utilizando valores lógicos y la función ifelse, es decir, valores TRUE o FALSE si se cumple la condición. En este sentido, se crea una variable que indica TRUE cuando la condición se cumple. df &lt;- df %&gt;% mutate(auto_pesado = ifelse(peso_kg &gt; 1800, TRUE, FALSE)) %&gt;% mutate(auto_liviano = ifelse(peso_kg &lt; 1000, TRUE, FALSE)) %&gt;% mutate(auto_nini = ifelse(peso_kg &gt; 1000 &amp; peso_kg &lt; 18000, TRUE, FALSE)) df %&gt;% select(peso_kg, auto_pesado, auto_liviano, auto_nini) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-34d7fc1e{}.cl-34c96028{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-34c9ae20{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-34c9d51c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-34c9d51d{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-34c9d51e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} peso_kgauto_pesadoauto_livianoauto_nini1,310.0FALSEFALSETRUE1,437.5FALSEFALSETRUE1,160.0FALSEFALSETRUE1,607.5FALSEFALSETRUE1,720.0FALSEFALSETRUE1,730.0FALSEFALSETRUE También podemos crear variables dummy, asignando el valor 1 cuando se cumpla la condición y 0 cuando no. # variable dummy cuando el auto es pesado df %&gt;% mutate(pesado_dummy = ifelse(peso_kg &gt; 1800, 1, 0)) %&gt;% arrange(desc(pesado_dummy)) %&gt;% select(peso_kg, pesado_dummy) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-350a5cc2{}.cl-34fe07ce{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-34fe2eca{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-34fe55b2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-34fe55b3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-34fe55b4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} peso_kgpesado_dummy2,035.011,865.011,890.012,625.012,712.012,672.51 De esta manera, pesado_dummy nos indica con el valor 1 todos aquellos autos que pesen más de 1800 kg. 2.4 Limpiar y renombrar variables Muchas veces las variables que integran las bases de datos poseen nombres que no son lo bastante intuitivos. Nos encontramos con variables que tienen nombres con mayúsculas, espacios u otros caracteres especiales, o simplemente no aluden a la lógica de la variable. Para estos casos podemos limpiar los nombres mediante librerías o renombrar las variables de forma manual. 2.4.1 1. Limpiar nombre de variables, librería janitor Para esta sección utilizaremos una base de datos que contiene información sobre países del mundo. # librería que contiene los datos library(gapminder) # asignamos los datos al objeto df df &lt;- gapminder # primero observamos los nombres de nuestro conjunto de datos y evaluamos si se debe aplicar, # o no, una limpieza de nombres. Para esta caso, contamos con variables que integran letras # mayúsculas, las cuales pueden entorpecer la manera de generar código. head(df) %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-354b7d7e{}.cl-353da442{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-353da443{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-353da444{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-353e1936{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-353e1937{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-353e1938{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-353e1939{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-353e193a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-353e193b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} countrycontinentYearlifeExppopgdpPercapAfghanistanAsia1,95228.8018,425,333779.4453AfghanistanAsia1,95730.3329,240,934820.8530AfghanistanAsia1,96231.99710,267,083853.1007AfghanistanAsia1,96734.02011,537,966836.1971AfghanistanAsia1,97236.08813,079,460739.9811AfghanistanAsia1,97738.43814,880,372786.1134 # también podemos solicitar solo los nombres de las variables names(df) ## [1] &quot;country&quot; &quot;continent&quot; &quot;Year&quot; &quot;lifeExp&quot; &quot;pop&quot; ## [6] &quot;gdpPercap&quot; # para limpiar los espacios, mayúsculas o caracteres especiales de nuestras variables utilizaremos # nuevamente la librería Janitor library(janitor) # limpiar los nombres de mi conjunto de datos df &lt;- clean_names(df) # observamos los cambios head(df) %&gt;% # vemos las primeras seis observaciones del df flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-357c3040{}.cl-356e7e00{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-356ea4e8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-356ea4e9{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-356f1ae0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-356f1ae1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-356f1ae2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-356f1ae3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-356f1ae4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-356f1ae5{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} countrycontinentyearlife_exppopgdp_percapAfghanistanAsia1,95228.8018,425,333779.4453AfghanistanAsia1,95730.3329,240,934820.8530AfghanistanAsia1,96231.99710,267,083853.1007AfghanistanAsia1,96734.02011,537,966836.1971AfghanistanAsia1,97236.08813,079,460739.9811AfghanistanAsia1,97738.43814,880,372786.1134 names(df) # vemos solo nos nombres de las variables ## [1] &quot;country&quot; &quot;continent&quot; &quot;year&quot; &quot;life_exp&quot; &quot;pop&quot; ## [6] &quot;gdp_percap&quot; Como podemos ver, las variables life_exp, year y gdp_percap transformaron sus letras a minúscula de manera automática. 2.4.2 2. Renombrar variables Si no estamos contentos con el trabajo automático que realiza janitor podemos renombrar las variables de forma manual. Para ello tenemos funciones de R base y de otras librerías. 2.4.2.0.1 - R base Con R base podemos renombrar variables según su posición en la base de datos. En este caso la primera variable es country, pero cambiaremos su nombre a pais. # renombrar variable utilizando la posición que utiliza en la base de datos # colnames(data)[posición] &lt;- &quot;nuevo_nombre&quot; colnames(df)[1] &lt;- &quot;pais&quot; # corroboramos el cambio de nombre de la primera variable names(df) ## [1] &quot;pais&quot; &quot;continent&quot; &quot;year&quot; &quot;life_exp&quot; &quot;pop&quot; ## [6] &quot;gdp_percap&quot; También podemos renombrar variables en conjunto. Por ejemplo, renombrar desde la variable 2 a la 4 # renombrar variables colnames(df)[2:4] &lt;- c(&quot;continente&quot;, &quot;año&quot;, &quot;esperanza_vida&quot;) # comprobar los cambios names(df) ## [1] &quot;pais&quot; &quot;continente&quot; &quot;año&quot; ## [4] &quot;esperanza_vida&quot; &quot;pop&quot; &quot;gdp_percap&quot; 2.4.2.1 - Tidyverse Además de R base, también contamos con una función especial dentro del Tidyverse: rename(), la cual cuenta con diversas formas de renombrar. Forma 1: rename() manera por defecto de utilizar la función. # rename(nombre_nuevo = nombre_original) + corroborar nombres df %&gt;% rename(esperanza_vida = life_exp, poblacion = pop) %&gt;% names() ## [1] &quot;country&quot; &quot;continent&quot; &quot;year&quot; ## [4] &quot;esperanza_vida&quot; &quot;poblacion&quot; &quot;gdp_percap&quot; Forma 2: rename_if() nos permite reemplazar los nombres de las variables siguiendo alguna condición que indiquemos. # renombrar todas las variables numéricas df %&gt;% rename_if(is.numeric, ~ c(&quot;año&quot;, &quot;esperanza_vida&quot;, &quot;poblacion&quot;, &quot;ingreso_percap&quot;)) %&gt;% names() ## [1] &quot;country&quot; &quot;continent&quot; &quot;año&quot; ## [4] &quot;esperanza_vida&quot; &quot;poblacion&quot; &quot;ingreso_percap&quot; Como se observa, se reemplazaron todas las variables numéricas. 2.5 Reordenar variables Una vez que hemos creado o renombrado nuestras variables, seguramente querremos organizarlas en un orden determinado. Retomando el conjunto de datos mtcars y las nuevas variables que fuimos incorporando, nos quedó una base de datos como esta: .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-35fcc804{}.cl-35ee52ec{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-35ee79e8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-35ee79e9{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-35eeeed2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-35eeeed3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-35eeeed4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-35eeeed5{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-35eeeed6{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-35eeeed7{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} mpgcyldisphpdratwtqsecvsamgearcarbpeso_kgpeso_text21.061601103.902.62016.4601441,310.0Ni pesado, ni livano21.061601103.902.87517.0201441,437.5Ni pesado, ni livano22.84108933.852.32018.6111411,160.0Ni pesado, ni livano21.462581103.083.21519.4410311,607.5Ni pesado, ni livano18.783601753.153.44017.0200321,720.0Ni pesado, ni livano18.162251052.763.46020.2210311,730.0Ni pesado, ni livano Tal como se muestra en la tabla, nuestras nuevas variables fueron creadas al final del conjunto de datos. Mas, no queremos mantener este orden, sino que esperamos tener la variable peso_kg y peso_text junto a la variable wt, para así mantener un orden en nuestro dataframe. Esto se logra realizar de diversas maneras, tanto desde R base como de librerías y funciones personalizadas que nos simplifican el proceso. 2.5.1 1. R base Utilizando ubicación de las variables Recordemos que buscábamos ordenar wt, peso_kg, peso_text, y si observamos la tabla, lo hemos conseguido solo utilizando las posiciones de las variables. Para este caso, en el código mantuvimos las posiciones de las variables 1:6, correspondientes desde mpg a wt, para luego indicar que las variables con posiciones 12 y 13 (peso_kg y peso_text respectivamente) seguirían a la variable 6 (wt), y finalmente mantener el orden de de las variables que ocupan la posición 7 a la 11. # reordenar variables usando sus posiciones df[, c(1:6,12,13, 7:11)] %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3631c95a{}.cl-362500bc{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-362527ea{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-362527eb{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36259c8e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36259c8f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36259c90{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36259c91{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36259c92{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36259c93{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} mpgcyldisphpdratwtpeso_kgpeso_textqsecvsamgearcarb21.061601103.902.6201,310.0Ni pesado, ni livano16.46014421.061601103.902.8751,437.5Ni pesado, ni livano17.02014422.84108933.852.3201,160.0Ni pesado, ni livano18.61114121.462581103.083.2151,607.5Ni pesado, ni livano19.44103118.783601753.153.4401,720.0Ni pesado, ni livano17.02003218.162251052.763.4601,730.0Ni pesado, ni livano20.221031 2.5.2 2. Tidyverse a) Función relocate() En el ejemplo le hemos indicado a R que las variables peso_kg y peso_text se posicionen después de la variables wt. # utilizando los nombres de las variables # relocate(c(&quot;var_x&quot;), after = &quot;variable_a_la_que_seguiran&quot;) df %&gt;% relocate(c(&quot;peso_kg&quot;, &quot;peso_text&quot;), .after = &quot;wt&quot;) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-366b9c52{}.cl-365b550e{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-365b7bd8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-365b7bd9{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-365bf0ae{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-365bf0af{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-365bf0b0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-365bf0b1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-365bf0b2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-365bf0b3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} mpgcyldisphpdratwtpeso_kgpeso_textqsecvsamgearcarb21.061601103.902.6201,310.0Ni pesado, ni livano16.46014421.061601103.902.8751,437.5Ni pesado, ni livano17.02014422.84108933.852.3201,160.0Ni pesado, ni livano18.61114121.462581103.083.2151,607.5Ni pesado, ni livano19.44103118.783601753.153.4401,720.0Ni pesado, ni livano17.02003218.162251052.763.4601,730.0Ni pesado, ni livano20.221031 # de igual manera, con el argumento &quot;before =&quot; se puede indicar las variables # se posicionen antes de una variable específica # (en caso obtendríamos la misma tabla) # df %&gt;% relocate(c(&quot;peso_kg&quot;, &quot;peso_text&quot;), .before = &quot;qsec&quot;) También podemos realizar este mismo procedimiento utilizando la posición que ocupan las variables en nuestro conjunto de datos. En este caso hemos indicado que las variables 12 y 13 (peso_kg y peso_texto) se posicionen antes que la variable 7 (qsec). # utilizando la posición de las variables # relocate(c(&quot;var_x&quot;), before = &quot;variable&quot;) df %&gt;% relocate(12:13, .before = 7) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-36a091c8{}.cl-36941740{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-36943e3c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36943e3d{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3694b312{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3694b313{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3694b314{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3694b315{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3694b316{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3694b317{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} mpgcyldisphpdratwtpeso_kgpeso_textqsecvsamgearcarb21.061601103.902.6201,310.0Ni pesado, ni livano16.46014421.061601103.902.8751,437.5Ni pesado, ni livano17.02014422.84108933.852.3201,160.0Ni pesado, ni livano18.61114121.462581103.083.2151,607.5Ni pesado, ni livano19.44103118.783601753.153.4401,720.0Ni pesado, ni livano17.02003218.162251052.763.4601,730.0Ni pesado, ni livano20.221031 b) Función select() Otra de las funciones presentes el tidyverse es select(), de la librería dplyr. Existen diversas manera de utilizar esta función, sin embargo, la eficiencia de estas dependerán de la cantidad de variables que contenga nuestra base de datos. b.1) Cuando contamos con pocas variables La primera manera de utilizar esta función es seleccionando el orden de las variables de acuerdo a los nombres que poseen en el dataframe. Para este ejemplo utilizaremos la siguiente tabla y buscaremos cambiar el orden de las variables departamento y salario, donde esta última ocupe la segunda posición de la tabla. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-36d0f692{}.cl-36c4a2fc{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-36c4ca02{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36c4ca03{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36c517dc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36c517dd{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36c517de{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36c517df{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36c517e0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36c517e1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} iddepartmentosalario7,058IT34,500.007,059sales560,890.787,060finance67,000.787,089IT25,000.007,072finance78,900.007,078sales25,000.00 Para realizar este cambio utilizamos la función select(), indicando el nombre de las variables según el orden que buscamos. Para este caso, la variable id queremos que se encuentre en la primera posición, seguido de salario y departamento, dando paso a la siguiente tabla. # reordenar con select() utilizando los nombres de las variables data %&gt;% select(id, salario, departmento) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-36f79f18{}.cl-36e99de6{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-36e9c4d8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36e9c4d9{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-36ea3b16{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36ea3b17{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36ea3b18{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36ea3b19{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36ea3b1a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-36ea3b1b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} idsalariodepartmento7,05834,500.00IT7,059560,890.78sales7,06067,000.78finance7,08925,000.00IT7,07278,900.00finance7,07825,000.00sales b.2) Cuando trabajamos con muchas variables Generalmente como analistas nos enfrentamos a manejar bases de datos con múltiples variables. Para aquellos casos, la función anterior no sería la más eficiente, pues deberíamos escribir un sin fin de variables según sus nombres, los cuales muchas veces no son de los más sencillos. Para estos casos es mejor utilizar las posiciones de las variables. Un ejemplo: tenemos una gran base de datos con diez variables que corresponden a una tanda de preguntas relacionadas y necesitamos llevarlas al inicio de nuestro conjunto de datos, ¿cómo lo hacemos? Para este ejemplo tenemos la siguiente base datos, con 19 variables, de las cuales las últimas 10 las queremos posicionar después de la variable day. # librería que contiene la BBDD library(nycflights13) # cargar BBDD al objeto df df &lt;- flights # observamos nuestros datos df %&gt;% head() %&gt;% datatable(fillContainer = TRUE) Como habíamos mencionado, en estos casos es más eficiente trabajar con las posiciones numéricas de las variables. En este sentido, en el código hemos indicado que mantendremos las posiciones de las primeras tres variables, seguidas de las variables 10 a la 19, y finalizando con las variables de la 4 a la 9, dando paso a la siguiente distribución de la base de datos: # ordenar variables con select() utilizando las posiciones de las variables df %&gt;% select(1:3, 10:19, 4:9) %&gt;% head() %&gt;% datatable(fillContainer = TRUE) 2.5.3 3. Función personalizada Si bien las anteriores funciones nos permiten lograr nuestros cometidos de reordenar las variables a nuestro antojo, estas lo hacen en largas líneas de código o nos hacen interactuar con aquellas otras variables que no queremos modificar. Debido a lo anterior, se ha creado la siguiente función personalizada que nos permite reordenar las variables de una manera mucho más sencilla, donde solo debemos asignar la posición que queremos que utilice la variable. Para que la función se integre a nuestro entorno de trabajo debemos copiar el código a continuación y correrlo en nuestro script o chunk de .rmd. De esta manera, la función se guardará en nuestro enviroment bajo el nombre de arrange.vars, permitiéndonos llamarla y utilizarla cuando deseemos. Código con la función: copiar y pegar en nuestro script ## FORMA DE UTILIZAR LA FUNCION ## ## df &lt;- arrange.vars(c(&quot;nombre.variable.x&quot;= posición)) ## df &lt;- arrange.vars(c(&quot;nombre.variable.A&quot;= 1, ## &quot;nombre.variable.B&quot; = 12, ## &quot;nombre.variable.C = X)) arrange.vars &lt;- function(data, vars){ ##stop if not a data.frame (but should work for matrices as well) stopifnot(is.data.frame(data)) ##sort out inputs data.nms &lt;- names(data) var.nr &lt;- length(data.nms) var.nms &lt;- names(vars) var.pos &lt;- vars ##sanity checks stopifnot( !any(duplicated(var.nms)), !any(duplicated(var.pos)) ) stopifnot( is.character(var.nms), is.numeric(var.pos) ) stopifnot( all(var.nms %in% data.nms) ) stopifnot( all(var.pos &gt; 0), all(var.pos &lt;= var.nr) ) ##prepare output out.vec &lt;- character(var.nr) out.vec[var.pos] &lt;- var.nms out.vec[-var.pos] &lt;- data.nms[ !(data.nms %in% var.nms) ] stopifnot( length(out.vec)==var.nr ) ##re-arrange vars by position data &lt;- data[ , out.vec] return(data) } Ahora que se ha creado la función en nuestro enviroment podremos llamarla y trabajar con ella. Retomando nuestro ejemplo anterior, obtuvimos la siguiente tabla, pero me he percatado que la variable time_hour estaría mejor posicionada si estuviese seguida a la variable day. Para reordenar únicamente la variable time_hour utilzaremos la nueva función creada, indicando que queremos que ocupe la posición 4 en nuestro dataframe. Como se observa, el cambio fue efectivo. Utilizar esta función personalizada agiliza el código y nos permite trabajar tanto con variables individuales como conjuntos. df %&gt;% arrange.vars(c(&quot;time_hour&quot; = 4)) %&gt;% head() %&gt;% datatable(fillContainer = TRUE) 2.6 Recodificación de variables Una vez que hemos creado, limpiado, renombrado y reordenado nuestras variables, es probable que debamos realizar ciertas recodificaciones a estas variables. Nuevamente, para ello contamos con una alternativa de R base, o también mediante librerías de terceros. Para los siguientes ejercicios utilizaremos una BBDD que contiene información de autos. En ella recodificaremos la variable cyl que se encuentra en valores numéricos a las catergoría de baja cilindrada, media cilindrada y alta cilindrada # cargar BBDD al objeto df df &lt;- mpg .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-379a4c90{}.cl-378cc246{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-378ce938{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-378ce939{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-378d3726{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-378d3727{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-378d3728{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-378d3729{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-378d372a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-378d372b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclassaudia41.81,9994auto(l5)f1829pcompactaudia41.81,9994manual(m5)f2129pcompactaudia42.02,0084manual(m6)f2031pcompactaudia42.02,0084auto(av)f2130pcompactaudia42.81,9996auto(l5)f1626pcompactaudia42.81,9996manual(m5)f1826pcompact 2.6.1 1. R base Una manera de recodificar variables utilizando R base es mediante la aplicación de los corchetes []. a) Recodificar en la misma variable Como se puede apreciar en la tabla, en la variable cyl, aquellos valores que eran 4 ahora son baja cilindrada, los que eran 6 son ahora media cilindrada, y aquellos de valor 8 ahora son alta cilindrada # recodificar con R base en la misma variable df$cyl[df$cyl == 4] &lt;- &quot;baja cilindrada&quot; df$cyl[df$cyl == 6] &lt;- &quot;media cilindrada&quot; df$cyl[df$cyl == 8] &lt;- &quot;alta cilindrada&quot; # BBDD con recodificación df %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-37cde4a6{}.cl-37c190d4{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-37c1b816{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-37c1b817{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-37c205f0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-37c205f1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-37c205f2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-37c205f3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-37c205f4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-37c205f5{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclassaudia41.81,999baja cilindradaauto(l5)f1829pcompactaudia41.81,999baja cilindradamanual(m5)f2129pcompactaudia42.02,008baja cilindradamanual(m6)f2031pcompactaudia42.02,008baja cilindradaauto(av)f2130pcompactaudia42.81,999media cilindradaauto(l5)f1626pcompactaudia42.81,999media cilindradamanual(m5)f1826pcompact b) Recodificar en distintas variables Anteriormente recodificamos dentro de la misma variable, pero habrán momentos en que necesitemos crear una nueva variable con esta recodificación para así no alterar la variable original. Esto también lo podemos realizar empleando los corchetes, pues únicamente debemos cambiar la variable de destino por el nombre que llevará la nueva variable. En nuestro caso, la variable que contenga la recodificación será cyl_rec. Como se puede apreciar en la tabla, aquellos valores 4 de la varible cyl se guardaron en cyl_rec como baja cilindrara, aquellos 6 como media cilindrada y los 8 como alta cilindrada. # recodificar con R base en distinta variable df$cyl_rec[df$cyl == 4] &lt;- &quot;baja cilindrada&quot; df$cyl_rec[df$cyl == 6] &lt;- &quot;media cilindrada&quot; df$cyl_rec[df$cyl == 8] &lt;- &quot;alta cilindrada&quot; # BBDD con recodificación df %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-38125ea6{}.cl-3802d8f0{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3802ffec{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3802ffed{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-380374c2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-380374c3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-380374c4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-380374c5{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-380374c6{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-380374c7{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclasscyl_recaudia41.81,9994auto(l5)f1829pcompactbaja cilindradaaudia41.81,9994manual(m5)f2129pcompactbaja cilindradaaudia42.02,0084manual(m6)f2031pcompactbaja cilindradaaudia42.02,0084auto(av)f2130pcompactbaja cilindradaaudia42.81,9996auto(l5)f1626pcompactmedia cilindradaaudia42.81,9996manual(m5)f1826pcompactmedia cilindrada 2.6.2 2. Tidyverse Otra herramienta útil que posee el universo tidy es la función recode(). Ella nos permitirá recodificar diversas variables dentro de un mismo código. Retomemos el ejercicio anterior con esta nueva sintaxys de recodificar. a) Recodificar en la misma variable # 1ra forma: sin usar condicionales df %&gt;% mutate(cyl = dplyr::recode(cyl, &quot;4&quot; = &quot;baja cilindrada&quot;, &quot;6&quot; = &quot;media cilindrada&quot;, &quot;8&quot; = &quot;alta cilindrada&quot;)) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-384db85c{}.cl-384164bc{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-38418bae{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-38418baf{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3842008e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3842008f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38420090{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38420091{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38420092{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38420093{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclassaudia41.81,999baja cilindradaauto(l5)f1829pcompactaudia41.81,999baja cilindradamanual(m5)f2129pcompactaudia42.02,008baja cilindradamanual(m6)f2031pcompactaudia42.02,008baja cilindradaauto(av)f2130pcompactaudia42.81,999media cilindradaauto(l5)f1626pcompactaudia42.81,999media cilindradamanual(m5)f1826pcompact # 2da forma: utilizando condicionales (en este caso &quot;case_when&quot;) df %&gt;% mutate(cyl = case_when(cyl == 4 ~ &quot;baja cilindrada&quot;, cyl == 6 ~ &quot;media cilindrada&quot;, cyl == 8 ~ &quot;alta clindrada&quot;)) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-38806694{}.cl-387412f4{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-387439e6{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-387439e7{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-387487de{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-387487df{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-387487e0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-387487e1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-387487e2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-387487e3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclassaudia41.81,999baja cilindradaauto(l5)f1829pcompactaudia41.81,999baja cilindradamanual(m5)f2129pcompactaudia42.02,008baja cilindradamanual(m6)f2031pcompactaudia42.02,008baja cilindradaauto(av)f2130pcompactaudia42.81,999media cilindradaauto(l5)f1626pcompactaudia42.81,999media cilindradamanual(m5)f1826pcompact b) Recodificar en distintas variables Tal como aprendimos en el apartado de crear variables, para hacer esto el tidyverse utilizamos la función mutate() y asignamos el nombre de la nueva variable. De esta manera, nuestra recodificación se ha guardado en la nueva variable cyl_rec. # 1ra forma: sin usar condicionales df %&gt;% mutate(cyl_rec = dplyr::recode(cyl, &quot;4&quot; = &quot;baja cilindrada&quot;, &quot;6&quot; = &quot;media cilindrada&quot;,&quot;8&quot; = &quot;alta cilindrada&quot;)) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-38b90210{}.cl-38aa3f0a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-38aa65fc{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-38aa65fd{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-38aadadc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38aadadd{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38aadade{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38aadadf{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38aadae0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38aadae1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclasscyl_recaudia41.81,9994auto(l5)f1829pcompactbaja cilindradaaudia41.81,9994manual(m5)f2129pcompactbaja cilindradaaudia42.02,0084manual(m6)f2031pcompactbaja cilindradaaudia42.02,0084auto(av)f2130pcompactbaja cilindradaaudia42.81,9996auto(l5)f1626pcompactmedia cilindradaaudia42.81,9996manual(m5)f1826pcompactmedia cilindrada # 2da forma: sin usar condicionales df %&gt;% mutate(cyl_rec = case_when(cyl == 4 ~ &quot;baja cilindrada&quot;, cyl == 6 ~ &quot;media cilindrada&quot;, cyl == 8 ~ &quot;alta clindrada&quot;)) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-38ecbb6e{}.cl-38e068c8{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-38e08fc4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-38e08fc5{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-38e104ae{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38e104af{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38e104b0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38e104b1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38e104b2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-38e104b3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclasscyl_recaudia41.81,9994auto(l5)f1829pcompactbaja cilindradaaudia41.81,9994manual(m5)f2129pcompactbaja cilindradaaudia42.02,0084manual(m6)f2031pcompactbaja cilindradaaudia42.02,0084auto(av)f2130pcompactbaja cilindradaaudia42.81,9996auto(l5)f1626pcompactmedia cilindradaaudia42.81,9996manual(m5)f1826pcompactmedia cilindrada 2.6.3 3. Car Si luego de las dos opciones anteriores aun no podemos llevar a cabo nuestra recodificación, contamos también con la librería car para realizar los cambios que buscamos. No obstante, su sintaxys es diferente a las anteriores trabajadas. a) Recodificar en la misma variable # recodificar con car en la misma variable df$cyl &lt;- car::recode(df$cyl, c(&#39;&quot;4&quot; = &quot;baja cilindrada&quot;; &quot;6&quot; = &quot;media cilindrada&quot;; &quot;8&quot; = &quot;alta cilindrada&quot;&#39;)) # observar los cambios df %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3920a032{}.cl-3913d7b2{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3913fea4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3913fea5{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-39147370{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39147371{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39147372{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39147373{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39147374{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39147375{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclassaudia41.81,999baja cilindradaauto(l5)f1829pcompactaudia41.81,999baja cilindradamanual(m5)f2129pcompactaudia42.02,008baja cilindradamanual(m6)f2031pcompactaudia42.02,008baja cilindradaauto(av)f2130pcompactaudia42.81,999media cilindradaauto(l5)f1626pcompactaudia42.81,999media cilindradamanual(m5)f1826pcompact b) Recodificar en distintas variables # recodificar con car en distintas variables df$cyl_rec &lt;- car::recode(df$cyl, c(&#39;&quot;4&quot; = &quot;baja cilindrada&quot;; &quot;6&quot; = &quot;media cilindrada&quot;; &quot;8&quot; = &quot;alta cilindrada&quot;&#39;)) # observar los cambios df %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-395b3882{}.cl-394bb15a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-394bd84c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-394bd84d{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-394c2662{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-394c2663{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-394c2664{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-394c2665{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-394c2666{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-394c2667{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} manufacturermodeldisplyearcyltransdrvctyhwyflclasscyl_recaudia41.81,999baja cilindradaauto(l5)f1829pcompactbaja cilindradaaudia41.81,999baja cilindradamanual(m5)f2129pcompactbaja cilindradaaudia42.02,008baja cilindradamanual(m6)f2031pcompactbaja cilindradaaudia42.02,008baja cilindradaauto(av)f2130pcompactbaja cilindradaaudia42.81,999media cilindradaauto(l5)f1626pcompactmedia cilindradaaudia42.81,999media cilindradamanual(m5)f1826pcompactmedia cilindrada 2.7 Selección de variables A pesar de que como analistas trabajamos con múltiples variables, existirán casos donde solo necesitaremos trabajar con ciertas variables específicas y no con todo el data set. 2.7.1 R Base Para seleccionar variables con R base utilizamos los corchetes [], donde se trabaja de la siguiente manera: df[filas, columnas] Si se omiten valores en alguno de los argumentos, R asume que se busca seleccionar todos esos valores. Por ejemplo, df[,4:7], aquí seleccionamos todas las filas y las columnas de la 4 a la 7. Procederemos a ejemplificar # seleccionar solo las primeras 4 variables df[,1:4] %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-398a8b32{}.cl-397e8594{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-397eac86{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-397eac87{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-397efa60{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-397efa61{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-397efa62{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-397efa63{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-397efa64{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-397efa65{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorclarity0.23IdealESI20.21PremiumESI10.23GoodEVS10.29PremiumIVS20.31GoodJSI20.24Very GoodJVVS2 # seleccionar las primeras 3 variables, más la número 8 a la 10 y las primeras diez observaciones (filas) df[1:10, c(1:3, 8:10)] %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-39b5c36a{}.cl-39a96fac{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-39a9969e{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-39a9969f{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-39aa0b9c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39aa0b9d{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39aa0b9e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39aa0b9f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39aa0ba0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39aa0ba1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorxyz0.23IdealE3.953.982.430.21PremiumE3.893.842.310.23GoodE4.054.072.310.29PremiumI4.204.232.630.31GoodJ4.344.352.750.24Very GoodJ3.943.962.480.24Very GoodI3.953.982.470.26Very GoodH4.074.112.530.22FairE3.873.782.490.23Very GoodH4.004.052.39 2.7.2 Tidyverse Nuevamente podemos utilizar las opciones que se encuentran en tidyverse para seleccionar variables. Esta opción nos permite agilizar nuestros códigos al contener funciones para filtrar de mejor manera aquellas variables que buscamos seleccionar. # seleccionar por nombre de variable df %&gt;% select(carat, cut, color) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-39e06110{}.cl-39d4821e{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-39d4a8f2{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-39d4a8f3{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-39d4f5be{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39d4f5bf{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39d4f5c0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39d4f5c1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39d4f5c2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-39d4f5c3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolor0.23IdealE0.21PremiumE0.23GoodE0.29PremiumI0.31GoodJ0.24Very GoodJ # seleccionar todas las variables, menos las indicadas (-) df %&gt;% select(-price) %&gt;% # todas las variables, menos precio head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3a0e7c08{}.cl-3a01da7a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3a020176{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a020177{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a024f64{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a024f65{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a024f66{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a024f67{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a024f68{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a024f69{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorclaritydepthtablexyz0.23IdealESI261.5553.953.982.430.21PremiumESI159.8613.893.842.310.23GoodEVS156.9654.054.072.310.29PremiumIVS262.4584.204.232.630.31GoodJSI263.3584.344.352.750.24Very GoodJVVS262.8573.943.962.48 # seleccionar variables que comiencen de una manera en particular df %&gt;% select(starts_with(&quot;c&quot;)) %&gt;% #todas la variables que comiencen con la letra &quot;c&quot; head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3a365b1a{}.cl-3a2a7c5a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3a2aa356{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a2aa357{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a2af13a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a2af13b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a2af13c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a2af13d{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a2af13e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a2af13f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorclarity0.23IdealESI20.21PremiumESI10.23GoodEVS10.29PremiumIVS20.31GoodJSI20.24Very GoodJVVS2 # seleccionar variables que terminen de una manera en particular df %&gt;% select(ends_with(&quot;e&quot;)) %&gt;% #todas la variables que terminen con la letra &quot;e&quot; head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3a5b080c{}.cl-3a4eb48a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3a4edb86{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a4f2956{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a4f2957{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a4f2958{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} tableprice553266132665327583345833557336 2.8 Filtrar casos 2.8.1 Tidyverse Así como necesitaremos seleccionar variables, también habrán ocasiones donde debamos filtrar nuestro conjunto de datos # seleccion de casos donde el corte sea premium df %&gt;% filter(cut == &quot;Premium&quot;) %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3a8c089e{}.cl-3a7fdc04{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3a8002f6{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a8002f7{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3a8050da{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a8050db{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a8050dc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a8050dd{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a8050de{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3a8050df{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorclaritydepthtablepricexyz0.21PremiumESI159.8613263.893.842.310.29PremiumIVS262.4583344.204.232.630.22PremiumFSI160.4613423.883.842.330.20PremiumESI260.2623453.793.752.270.32PremiumEI160.9583454.384.422.680.24PremiumIVS162.5573553.973.942.47 # seleccion de casos donde el corte del mineral sea premium, color E, # y el precio sea mayor a 18100 df %&gt;% filter(cut == &quot;Premium&quot;, color == &quot;E&quot;, price &gt; 18100) %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3ac2aab6{}.cl-3ab34bf2{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3ab372da{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3ab372db{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3ab3e7ba{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3ab3e7bb{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3ab3e7bc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3ab3e7bd{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3ab3e7be{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3ab3e7bf{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} caratcutcolorclaritydepthtablepricexyz2.02PremiumESI261.05918,1178.188.124.972.12PremiumESI258.35918,1208.488.414.922.19PremiumESI262.46118,2328.318.235.162.14PremiumESI261.55818,2918.318.245.092.03PremiumESI261.55918,3108.168.245.041.70PremiumEVS258.66218,3427.927.844.622.00PremiumESI261.85618,4268.128.055.002.03PremiumESI261.55918,4778.248.165.04 2.9 Bases de datos Long y Wide ¿Qué es long y qué es wider? Existen dos formas de distribuir las bases de datos: en formato largo y ancho. El formato largo consiste en transponer columnas a filas, es decir, convertir las variables a observaciones. Mientras que el formato ancho consiste en transformar las observaciones en varables independientes. 2.9.1 1. De long a wider Si observamos nuestros datos, podemos apreciar que la variable species se encuentra en formato long, pero necesitamos que cada especie se encuentre en variables diferenciadas, es decir, una variable independiente para cada una de las especies setosa, versicolor y virginica. df %&gt;% datatable(fillContainer = TRUE) Para realizar esto utilizamos la función pivot_wider(), pertenenciente a las herramientas del tidyverse. # transformar las los valores de Species a variables independientes df %&gt;% pivot_wider(names_from = Species, # variable de donde salen los nombres values_from = Species) %&gt;% # valores que toman las nuevas variables datatable(fillContainer = TRUE) Como vemos, se crearon tres nuevas variables con los nombre de cada especie, respetando los valores que contenía la variable original. 2.9.2 2. De wider a long También podemos pasar de un formato wider a uno longer, es decir, transformar columnas a filas. Para ello utilizamos la función pivot_longer() del paquete dplyr, alojado en tidyverse. Como vemos en la tabla, contamos con 10 variables que muestran los ingresos de las personas encuestadas (incluyendo el no sabe/no responde), las cuales queremos convertir a formato long. # observamos nuestros datos df %&gt;% head() %&gt;% flextable() .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3b26a66a{}.cl-3b1a2bce{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3b1a52ca{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b1a52cb{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b1aa0ae{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b1aa0af{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b1aa0b0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b1aa0b1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b1aa0b2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b1aa0b3{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} religion&lt;$10k$10-20k$20-30k$30-40k$40-50k$50-75k$75-100k$100-150k&gt;150kDon't know/refusedAgnostic27346081761371221098496Atheist12273752357073597476Buddhist27213034335862395354Catholic4186177326706381,1169497926331,489Dont know/refused151415111035211718116Evangelical Prot5758691,0649828811,4869497234141,529 # convertir a longer df %&gt;% pivot_longer(2:11, # variables a convertir names_to = &quot;ingreso&quot;, # variable donde se ingresarán los nombres de las variables originales values_to = &quot;frecuencia&quot;) %&gt;% # variable que contendrá los valores de las variables originales datatable(fillContainer = TRUE) 2.10 Colapsar variables En algunos casos tendremos baterías de preguntas que tendrán los valores en columnas independientes. Un ejemplo de ello es la tabla a continuación, donde cada estado civil corresponde a una variable en particular, teniendo valores en aquellas que responde la persona y valores NA en aquellas preguntas ajenas a las que respondió. Si bien este tipo de variables son útiles, muchas veces querremos tener una nueva variable que contemple todas las respuestas de tales baterías. Para esto utilizamos la función coalese(), la cual nos permitirá colapsar todas las variables en una. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3b5e0b46{}.cl-3b5254ae{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3b527b6e{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b527b6f{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b52c97a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b52c97b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b52c97c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b52c97d{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b52c97e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b52c97f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} idp1p2p3153casado154soltero155soltero156viudo157casado Para el ejemplo, queremos crear una nueva variable que contenga las respuestas del estado civil. Cuando tengamos una gran batería de preguntas es mejor trabajar con un vector que contenga los nombres de las variables según su posición en el dataframe. En este caso tenemos tres variables, las cuales se posicionan desde la columna 2 a la 4 dentro del dataframe. Para no escribir variable por variable en la función vamos a crear un vector que contenga los nombres de estas variables. ### CASOS CON 3 O MÁS VARIABLES ### # a) creamos un vector que contenga los nombres de nuestras variables # en este caso las variables p1, p2, p3 # en otros casos con mas preguntas solo debemos asignar el rango dentro de la funcion # variables &lt;- colnames(df[x:y]) variables &lt;- colnames(df[2:4]) # b) para ejecutar correctamente el codigo debemos insertar el vector que hemos creado # anteriormente, dentro de la funcion syms(VECTOR) y se uiliza de la siguiente manera: # df &lt;- df %&gt;% # mutate(nombre_var_nueva = coalesce(!!! syms(variables))) df &lt;- df %&gt;% mutate(estado_civil = coalesce(!!! syms(variables))) .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3b94868a{}.cl-3b8881b4{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3b88a89c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b88a89d{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3b88f68a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b88f68b{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b88f68c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b88f68d{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b88f68e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3b88f68f{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} idp1p2p3estado_civil153casadocasado154solterosoltero155solterosoltero156viudoviudo157casadocasado Otra manera de hacer esto es sin utilizar el vector de variables. Este caso es recomendado cuando tenemos una cantidad menor de variables. Para este ejemplo solo utilizaremos dos variables, lo cual no requiere mucho tiempo al escribirlas al mano y tendremos un resultado similar al anterior, pero con un cambio en el código, pues para este caso no necesitaremos los argumentos !!! syms(variables) ### CASOS CON 2 VARIABLES ### df &lt;- df %&gt;% mutate(estado_civil = coalesce(p1,p2)) .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-3bcecf3e{}.cl-3bc31770{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3bc33e62{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3bc33e63{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-3bc3b342{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3bc3b343{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3bc3b344{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3bc3b345{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3bc3b346{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3bc3b347{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} idp1p2estado_civil153casadocasado154solterosoltero155solterosoltero156casadocasado157casadocasado "],["automatización-de-tabulaciones-de-variables-de-frecuencia-contingencia-y-diferencia-de-medias.html", " 3 Automatización de tabulaciones de variables (de frecuencia, contingencia y diferencia de medias) 3.1 Tablas de frecuencia/contingencia 3.2 Tablas de diferencias de medias 3.3 Exportar tablas a excel", " 3 Automatización de tabulaciones de variables (de frecuencia, contingencia y diferencia de medias) 3.1 Tablas de frecuencia/contingencia Gran parte del trabajo que realiza el analista es manipular y presentar datos cualitativos. Debido a esta frecuencia en el uso de estas técnicas, es mucho más eficiente contar con una herramienta (en este caso un script) que nos permita automatizar el proceso de generación de tablas. Para lograr generar estas tablas realizaremos los siguientes pasos: 3.1.1 1. Cargar nuestra BBDD # cargamos nuestra bbdd en formato .sav con la librería haven library(haven) # Definir directorio propio (quitar comentario) # getwd() # IMPORTAR BBDD director &lt;- read_sav(&quot;BBDD/220244 BDD_director_escalas.sav&quot;) # cargar base summary(director$Pond_Nac) # resumen estadístico del ponderador (si aplica) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.7903 0.7903 0.7903 1.0000 1.3146 1.3146 3.1.2 2. Creamos un banner Se debe crear el objeto Banner, con las variables de cruce a considerar y la función total(). Con el argumento tab_weight se pone la variable ponderador. # cargamos el tidyverse, pues utilizaremos el pipeline ( %&gt;% ) library(tidyverse) # cargamos la libraría expss library(expss) # duplicamos la base original BBDD &lt;- director # banner banner_1 &lt;- BBDD %&gt;% # base tab_cols(total()) %&gt;% # variables que queremos como columnas*** tab_weight(weight = Pond_Nac) # agregamos el ponderador de nuestra base # *** tenemos la posibilidad de agregar otras variables de interés. # Un ejemplo puede ser incluir la variable &quot;sexo&quot;, u otra variable (ahora solo pediremos el total) # Ejemplo: # banner_1 &lt;- BBDD %&gt;% # base # tab_cols(total(c(sexo, comuna)) %&gt;% # variables que queremos como columnas # tab_weight(weight = Pond_Nac) # agregamos el ponderador de nuestra base # Si no hay ponderador, se puede usar tambien la función &quot;calc&quot;. # Hace lo mismo que la otra, pero sin ponderar. # (quitar comentari en caso de utilizar) #banner_1 &lt;- calc(total(), estrato_ciudad, V_1, V_2)) 3.1.3 3. Una vez creamos nuestro objeto banner, debemos crear una función capaz de crear las diferencias proporcionales # esta función se guardará en nuestro enviroment con el nombre de &quot;tab_pct_sig&quot; tab_pct_sig = . %&gt;% tab_stat_cpct( # funcion total_statistic = c(&quot;w_cases&quot;, # total de casos ponderados &quot;u_cases&quot;), # total de casos no poderados total_label = c(&quot;Número de casos ponderados&quot;, # etiqueta de &quot;w_cases&quot; &quot;Número de casos no ponderados&quot;) # etiqueta de &quot;u_cases&quot; ) %&gt;% tab_last_sig_cpct(bonferroni = TRUE) # TRUE=calcula las # diferencias proporcionales 3.1.4 4. Creación de secciones (Recomendado) Cuando necesitamos generar múltiples tablas es mejor separar la base de datos por secciones, pues calcular múltiples tablas de diversas variables puede hacer que el computador se congele. Para este caso crearemos una sección que contiene veintiún preguntas escalares, la cual guardaremos en formato lista. Si lo deseamos, podemos guardar esa lista en otro objeto particular que haga referencia a ella. # creamos nuestra seccion con las preguntas que la componen # para este caso seleccionamos 21 preguntas seccion_1_prop &lt;- BBDD %&gt;% select(ConfDir_P1:ConfProc_P21) # corroboramos que la seccion se componga con las variables requeridas names(seccion_1_prop) ## [1] &quot;ConfDir_P1&quot; &quot;ConfDir_P2&quot; &quot;ConfDir_P3&quot; &quot;ConfDir_P4&quot; ## [5] &quot;ConfDir_P5&quot; &quot;ConfDir_P6&quot; &quot;ConfDir_P7&quot; &quot;ConfDir_P8&quot; ## [9] &quot;ConfDir_P9&quot; &quot;ConfDir_P10&quot; &quot;ConfDir_P11&quot; &quot;ConfDir_P12&quot; ## [13] &quot;ConfDir_P13&quot; &quot;ConfDir_P14&quot; &quot;ConfDir_P15&quot; &quot;ConfDir_P16&quot; ## [17] &quot;ConfDir_P17&quot; &quot;ConfDir_P18&quot; &quot;ConfDir_P19&quot; &quot;ConfDir_P20&quot; ## [21] &quot;ConfProc_P21&quot; # creamos una lista que contiene los elementos solicitados () list_table_seccion1_banner1 = lapply(seccion_1_prop, function(variable) { banner_1 %&gt;% tab_cells(variable) %&gt;% tab_pct_sig %&gt;% tab_pivot() }) # Funcion &quot;lapply&quot;: aplica una funcion especifica a cada elemento # del objeto que se le indique. Para este caso, aplicamos los tabulados # de frecuencias a toda la seccion_1_prop, arrojando un objeto en formato lista #Si queremos podemos guardar todas las tablas dentro de un objeto #ConfDir_P1 &lt;- list_table_seccion1_banner1$ConfDir_P1 ### OJO: Esta opcion hace que se pierdan las etiquetas ### # codigo para obtener un ejemplo de nuestras tablas (para P1 en este caso) print(list_table_seccion1_banner1$ConfDir_P1) ## ## | | ## | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ## | P1_01 A continuación, se enuncian una serie de AFIRMACIONES SOBRE DISTINTOS ESTAMENTOS DE ESTE LICEO, Por favor, marque su nivel de acuerdo o desacuerdo con cada afirmación, considerando que 1 es Muy en desacuerdo y 6 es Muy de acuerdo:Los docentes de es | ## | | ## | | ## | | ## | | ## | | ## | | ## | | ## | | ## ## | #Total | ## ------------------------------ | ------ | ## Muy en desacuerdo | | ## 2 | | ## 3 | 1.6 | ## 4 | 28.4 | ## 5 | 49.5 | ## Muy de acuerdo | 17.9 | ## NR | 2.6 | ## #Número de casos ponderados | 50 | ## #Número de casos no ponderados | 50 | 3.2 Tablas de diferencias de medias Así como buscamos crear tablas de frecuencias/contingencias, también necesitaremos crear tablas que contengan datos cuantitativos. Para este caso haremos tablas con diferencias de medias. 3.2.1 1. Creamos un banner # creamos un banner que contenga nuestra informacion # duplicamos la base original BBDD &lt;- director # banner banner_2 &lt;- BBDD %&gt;% # base tab_cols(total()) %&gt;% # variables que queremos como columnas*** tab_weight(weight = Pond_Nac) # agregamos el ponderador de nuestra base # *** tenemos la posibilidad de agregar otras variables de interés. # Un ejemplo puede ser incluir la variable &quot;sexo&quot;, u otra variable # Ejemplo: # banner_1 &lt;- BBDD %&gt;% # base # tab_cols(total(c(sexo, comuna)) %&gt;% # variables que queremos como columnas # tab_weight(weight = Pond_Nac) # agregamos el ponderador de nuestra base # Si no hay ponderador, se puede usar tambien la función &quot;calc&quot;. # Hace lo mismo que la otra, pero sin ponderar # banner_1 &lt;- calc(total(), estrato_ciudad, V_1, V_2)) 3.2.2 2. Creamos una función que nos permita calcular las diferencias de medias # esta función se guardará en nuestro enviroment con el nombre de &quot;tab_means_sig&quot; tab_means_sig = . %&gt;% tab_stat_mean_sd_n( # funcion labels = c(&quot;Mean&quot;, # etiquetas que tendran las filas. &quot;sd&quot;, # Siguen el mismo orden que la funcion: &quot;N&quot;)) %&gt;% # mean, sd, n tab_last_sig_means(bonferroni = TRUE) # TRUE=calcula las diferencias de media 3.2.3 3. Creación de secciones (Recomendado) Cuando necesitamos generar múltiples tablas es mejor separar la base de datos por secciones, pues calcular múltiples tablas de diversas variables puede hacer que el computador se congele. Para este caso crearemos una sección que contiene veintiún preguntas escalares, la cual guardaremos en formato lista. Si lo deseamos, podemos guardar esa lista en otro objeto particular que haga referencia a ella. # creamos nuestra seccion con las preguntas que la componen seccion_1_medias &lt;- BBDD %&gt;% select(ConfDir_P1:ConfProc_P21) # corroboramos que la seccion se componga con las variables requeridas names(seccion_1_medias) ## [1] &quot;ConfDir_P1&quot; &quot;ConfDir_P2&quot; &quot;ConfDir_P3&quot; &quot;ConfDir_P4&quot; ## [5] &quot;ConfDir_P5&quot; &quot;ConfDir_P6&quot; &quot;ConfDir_P7&quot; &quot;ConfDir_P8&quot; ## [9] &quot;ConfDir_P9&quot; &quot;ConfDir_P10&quot; &quot;ConfDir_P11&quot; &quot;ConfDir_P12&quot; ## [13] &quot;ConfDir_P13&quot; &quot;ConfDir_P14&quot; &quot;ConfDir_P15&quot; &quot;ConfDir_P16&quot; ## [17] &quot;ConfDir_P17&quot; &quot;ConfDir_P18&quot; &quot;ConfDir_P19&quot; &quot;ConfDir_P20&quot; ## [21] &quot;ConfProc_P21&quot; # creamos una lista que contiene los elementos solicitados () list_table_seccion1_banner2 = lapply(seccion_1_medias, function(variable) { banner_2 %&gt;% tab_cells(variable) %&gt;% tab_means_sig() %&gt;% tab_pivot() }) # Funcion &quot;lapply&quot;: aplica una operacion especifica a cada elemento # del objeto que se le indique. Para este caso, aplicamos los tabulados # de media a toda la seccion_1_medias, arrojando un objeto en formato lista #Si queremos podemos guardar todas las tablas dentro de un objeto #ConfDir_P1 &lt;- list_table_seccion1_banner2$ConfDir_P1 # Esta opcion hace que se pierdan las etiquetas # codigo para obtener un ejemplo de nuestras tablas (para P1 en este caso) print(list_table_seccion1_banner2$ConfDir_P1) ## ## | | ## | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ## | P1_01 A continuación, se enuncian una serie de AFIRMACIONES SOBRE DISTINTOS ESTAMENTOS DE ESTE LICEO, Por favor, marque su nivel de acuerdo o desacuerdo con cada afirmación, considerando que 1 es Muy en desacuerdo y 6 es Muy de acuerdo:Los docentes de es | ## | | ## | | ## ## | #Total | ## ---- | ------ | ## Mean | 7.3 | ## sd | 15.2 | ## N | 50.0 | 3.3 Exportar tablas a excel Una vez tengamos los cálculos de nuestras tablas, necesitaremos exportarlas para poder presentarlas de buena manera. Contamos con dos alternativas para esto: 1) exportarlas de manera independiente o 2) exportar ambas tablas (de frecuencias y de diferencias de medias) en un solo archivo excel. 3.3.1 1. Independientes: porcentajes a) Construir hoja de cálculo en R # para construir nuestro hoja de calculo de R utilizaremos la libreria &quot;openxlsx&quot; library(openxlsx) # crear excel en R banner_prop = createWorkbook() # generamos documento en blanco. sh1 = addWorksheet( # generamos una hoja para las diferencias de banner_prop, &quot;Proporciones&quot;) # proporciones b) Introducir elementos al objeto woorkbook # para introducir elementos dentro de nuesto objeto excel generado utilizamos la libreria &quot;expss&quot; library(expss) xl_write(list_table_seccion1_banner1, # lista con nuestros resultados la seccion 1 banner_prop, # nuestro objeto workbook creado anteriormente sh1, # hoja especifica para proporciones col_symbols_to_remove = &quot;#&quot;, # eilimanr # de las columnas row_symbols_to_remove = &quot;#&quot;, # eliminar # de las filas other_col_labels_formats = list(&quot;#&quot; = createStyle(textDecoration = &quot;bold&quot;))) c) Exportar objeto workbook a excel # exportar todo lo introducido en banner_prop a excel ### OJO: quitar comentarios para usar ### # saveWorkbook(banner_prop, # objeto a exportar # &quot;Diferencias proporcionales.xlsx&quot;, # nombre de la hoja # overwrite = TRUE) 3.3.2 2. Independientes: diferencia de medias a) Construir hoja de cálculo en R # para construir nuestro hoja de calculo de R utilizaremos la libreria &quot;openxlsx&quot; library(openxlsx) # crear excel en R banner_medias = createWorkbook() # generamos documento en blanco sh2 = addWorksheet(banner_medias, # generamos una hoja para &quot;Diferencias de media&quot;) # insertar las medias b) Introducir elementos al objeto woorkbook # para introducir elementos dentro de nuesto objeto excel generado utilizamos la libreria &quot;expss&quot; library(expss) xl_write(list_table_seccion1_banner2, # lista con nuestros resultados la seccion 1 banner_medias, # nuestro objeto workbook creado anteriormente sh1, # hoja especifica para docentes col_symbols_to_remove = &quot;#&quot;, # eiliminar # de las columnas row_symbols_to_remove = &quot;#&quot;, # eliminar # de las filas other_col_labels_formats = list(&quot;#&quot; = createStyle(textDecoration = &quot;bold&quot;))) c) Exportar objeto workbook a excel # # exportar todo lo introducido en banner_prop a excel ### OJO: quitar comentarios para usar ### # saveWorkbook(banner_medias, # objeto a exportar # &quot;Diferencias de medias.xlsx&quot;, # nombre de la hoja # overwrite = TRUE) 3.3.3 3. En conjunto: porcentaje y dif de medias en un solo archivo Para exportar un solo archivo excel debemos: a) Crear banner con sus hojas # crear banner banner_full &lt;- createWorkbook() # generamos documento en blanco sh3 &lt;- addWorksheet(banner_full, # generamos una hoja para insertar las proporciones &quot;Diferencias proporcionales&quot;) sh4 &lt;- addWorksheet(banner_full, &quot;Diferencias de medias&quot;) # generamos una hoja para insertar las medias b) Escribir información dentro del objeto workbook # para introducir elementos dentro de nuesto objeto excel generado # utilizamos la libreria &quot;expss&quot; library(expss) xl_write(list_table_seccion1_banner2, # lista con nuestros resultados la seccion 1 banner_full, # nuestro objeto workbook creado anteriormente sh4, # hoja especifica para medias col_symbols_to_remove = &quot;#&quot;, # eilimanr # de las columnas row_symbols_to_remove = &quot;#&quot;, # eliminar # de las filas other_col_labels_formats = list(&quot;#&quot; = createStyle(textDecoration = &quot;bold&quot;))) xl_write(list_table_seccion1_banner1, # lista con nuestros resultados la seccion 1 banner_full, # nuestro objeto workbook creado anteriormente sh3, # hoja especifica para proporciones col_symbols_to_remove = &quot;#&quot;, # eilimanr # de las columnas row_symbols_to_remove = &quot;#&quot;, # eliminar # de las filas other_col_labels_formats = list(&quot;#&quot; = createStyle(textDecoration = &quot;bold&quot;))) c) Exportar archivo excel # exportar todo lo introducido en banner_prop a excel ### OJO: quitar comentarios para usar ### # saveWorkbook(banner_full, # objeto a exportar # &quot;Diferencias prop y medias.xlsx&quot;, # nombre de la hoja # overwrite = TRUE) Al exportar nuestro archivo, nos encontraremos dos hojas dentro del mismo archivo excel, una para cada sheet que hayamos agregado en nuestro código de R (en este caso sh3 y sh4 presentes en el código anterior) "],["clasificación-por-nivel-socio-económico-metodología-aim.html", " 4 Clasificación por nivel socio-económico (Metodología AIM) 4.1 Construcción con ingreso 4.2 Construcción sin ingreso (proxy)", " 4 Clasificación por nivel socio-económico (Metodología AIM) Como analistas de datos nos encontramos trabajando constantemente con formas de clasificación social, siendo la clasificación por nivel socio-económico la principal de ellas. Existen diversas maneras de generar estas clasificaciones. Una de ellas es la que propone la Asociación de Investigadores de Mercado y Opinión Pública (AIM). Tal asociación propone dos caminos para su construcción: 1) utilizando el nivel de ingreso, más el nivel educacional y ocupación del jefe de hogar; y 2) a falta del ingreso, utilizar un proxy mediante la cantidad de bienes que posee el jefe de hogar, sumado a su nivel educacional y su ocupación. Para más información sobre el método ingrese aquí Para más información sobre el manual ingrese aquí En Datavoz contamos con dos archivos que contienen las categorías estandarizadas para cada una de las formas de construcción. Archivos Ingresos Bienes 4.1 Construcción con ingreso 4.1.1 a. cargar nuestros datos # cargar datos estandarizados de clasificación t_ing &lt;- readRDS(&quot;BBDD/GSE_2019_ingresos.rds&quot;) # cargar df de datos a trabajar library(haven) df &lt;- read_sav(&quot;BBDD/220208-Base GPS-Derechos-Digitales-ponderadores.sav&quot;) 4.1.2 b. recodificar nuestras variables Para lograr trabajar con la metodología propuesta por la AIM, debemos recodificar nuestras variables de ocupación, nivel educacional e ingresos, en función de las categorías estandarizadas del .RDS \"t_ing\" b.1) ocupación La ocupación responde a la siguiente distribución: Ocupación* Codificación Trabajadores no calificados 1 Oficiales, Operarios y Artesanos 2 Vendedores, operadores de máquinas, agricultores, trabajadores calificados, sin dato 3 Empleados de Oficina 4 Técnicos y Profesionales de Nivel Medio 5 Directivos y Profesionales de Nivel Alto 6 *Nota: ocupaciones creadas en df a CIUO-88. En este sentido, para nuestra df de ejemplo, recodificaremos de la siguiente manera la variable S6_B, que contiene los valores de ocupación utilizados en el cuestionario original. # recodificar ocupacion df &lt;- df %&gt;% mutate(ocup = case_when(S6_B == 1 ~ 1, S6_B == 2 ~ 2, S6_B %in% c(3,4,5,10) ~ 3, S6_B == 6 ~ 4, S6_B == 7 ~ 5, S6_B %in% c(8,9) ~ 6)) b.2) nivel educacional Para el caso del nivel educacional, debemos mantener la distribución: Nivel educacional Codificación Básica completa o menos 1 Media incompleta 2 Media completa 3 Técnica incompleta o completa, Univ. incompleta 4 Universitaria completa o más 5 # recodificar n. educ df &lt;- df %&gt;% mutate(educ = case_when(educ_rec %in% c(1,2) ~ 1, educ_rec == 3 ~ 2, educ_rec %in% c(4,5) ~ 3, educ_rec %in% c(6,7,8) ~ 4, educ_rec %in% c(9,10) ~ 5)) b.3) tramo de ingresos # colapsar todas las variables de ingreso en una nueva variable df &lt;- df %&gt;% mutate(tramo = coalesce(S8_1,S8_2,S8_3,S8_4,S8_5,S8_6,S8_7)) b.4) homologar variables Luego de haber recodificado nuestras variables, tendremos que homologarlas a la naturaleza de las variables de \"t_ing\" para evitar conflictos al momento de unir ambas dfs de datos. # homologar variables df$educ&lt;-as.double(df$educ) df$ocup&lt;-as.double(df$ocup) df$tramo&lt;-as.character(df$tramo) 4.1.3 c. integrar la variable gse y generar recodificación Como hemos homologado las variables, podemos unir ambas dfs de datos con total seguridad. # unir categorías de gse en nuestra df de datos df &lt;- left_join(df,t_ing,by=c(&quot;educ&quot;,&quot;ocup&quot;,&quot;tramo&quot;)) ###Tienen que tener la misma clase### # recodificar gse df &lt;-df %&gt;% mutate(gse_rec = case_when(gse %in% c(&quot;AB&quot;,&quot;C1a&quot;,&quot;C1b&quot;) ~ &quot;Alto (AB+C1a+C1b)&quot;, gse %in% c(&quot;C2&quot;,&quot;C3&quot;) ~ &quot;Medio (C2+C3)&quot;, gse %in% c(&quot;D&quot;,&quot;E&quot;) ~ &quot;Bajo (D+E)&quot;, TRUE ~ &quot;Sin información&quot;)) Al realizar los pasos anteriores deberíamos contar con las siguientes variables y el gse construido .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-4b2dbc6a{}.cl-4b211adc{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4b2141ce{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4b2141cf{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4b21b6b8{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b21b6b9{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b21b6ba{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b21b6bb{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b21b6bc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b21b6bd{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} respondent_idocupeductramogsegse_rec13310463848211EBajo (D+E)13309852077315C2Medio (C2+C3)13308853969625C1bAlto (AB+C1a+C1b)13309166463635C1bAlto (AB+C1a+C1b)13309126698425C2Medio (C2+C3)13308733485635C1bAlto (AB+C1a+C1b) 4.1.4 **d) exportar BBDD con clasificación socioeconómica ### OJO: quitar comentarios para guardar ### # write_sav(base, # BBDD # &quot;220209 Base GPS-Derechos Digitales-ponderadores.sav&quot;) # Nombre 4.2 Construcción sin ingreso (proxy) 4.2.1 a. Cargar nuestros datos # cargar datos estandarizados de clasificación t_bienes &lt;- readRDS(&quot;BBDD/GSE_2019_bienes.rds&quot;) # cargar df de datos a trabajar library(haven) load(&quot;BBDD/Mallplaza_Pond.Rdata&quot;) df &lt;- mallplaza 4.2.2 b. recodificar nuestras variables Para lograr trabajar con la metodología propuesta por la AIM, debemos recodificar nuestras variables de ocupación, nivel educacional y aquellas que repsondan a los bienes del jefe del hogar. Todo esto en función de las categorías estandarizadas del .RDS \"t_bienes\" b.1) ocupación La ocupación responde a la siguiente distribución: Ocupación* Codificación Trabajadores no calificados 1 Oficiales, Operarios y Artesanos 2 Vendedores, operadores de máquinas, agricultores, trabajadores calificados, sin dato 3 Empleados de Oficina 4 Técnicos y Profesionales de Nivel Medio 5 Directivos y Profesionales de Nivel Alto 6 *Nota: ocupaciones creadas en df a CIUO-88. En este sentido, para nuestra df de ejemplo, recodificaremos de la siguiente manera la variable F_7, que contiene los valores de ocupación utilizados en el cuestionario original. # recodificar ocupacion #Las dos útlimas líneas imputan educacion a 6 casos sin info df &lt;- df %&gt;% mutate(ocup = case_when(F_7 == 1 ~ 1, F_7 == 2 ~ 2, F_7 %in% c(3,4,5,10) ~ 3, F_7 == 6 ~ 4, F_7 == 7 ~ 5, F_7 %in% c(8,9) ~ 6, F_7==99 &amp; F_4&lt;10~3, F_7==99 &amp; F_4==10~8)) b.2) nivel educacional Para el caso del nivel educacional, debemos mantener la distribución: Nivel educacional Codificación Básica completa o menos 1 Media incompleta 2 Media completa 3 Técnica incompleta o completa, Univ. incompleta 4 Universitaria completa o más 5 #Educacion jefe de hogar (f5=1 es jefe de hogar, f6 es educacion jefe de hogar) # &quot;si F_5=1 pegame los valores de F_4, sino pegame los valores de F_6&quot; df&lt;- df %&gt;% mutate(ed_jh=ifelse(F_5==1, F_4, F_6)) #Quedan 5 casos sin información. 2 adultos jóvenes que reportan educacion propia # pero no son jefes de hogares, y tres &gt;55 años que no reportan nada. # Les imputamos valores: df&lt;- df %&gt;% mutate(ed_jh=ifelse(ed_jh==99, F_4, ed_jh)) df&lt;- df %&gt;% mutate(ed_jh=ifelse(ed_jh==99, 9, ed_jh)) # recodificar df &lt;- df %&gt;% mutate(educ = case_when(ed_jh %in% c(1,2) ~ 1, ed_jh == 3 ~ 2, ed_jh %in% c(4,5) ~ 3, ed_jh %in% c(6,7,8) ~ 4, ed_jh %in% c(9,10) ~ 5)) b.3) bienes Para el caso de los bienes del jefe de hogar, debemos mantener la distribución: Variables proxy de ingreso Tiene No tiene Isapre PSH 1 0 Línea de crédito PSH 1 0 Celular con contrato PSH 1 0 Vehículo laboral o particular PSH 1 0 Total bienes que tiene PSH 4 0 # reocodificacion de bienes # &quot;bien1 = si F_11_1 es igual a 1, pegame un 1, de lo contrario un 0&quot; df&lt;- df %&gt;% mutate(bien1=ifelse(F_11_1==1, 1, 0)) df&lt;- df %&gt;% mutate(bien2=ifelse(F_11_2==1, 1, 0)) df&lt;- df %&gt;% mutate(bien3=ifelse(F_11_3==1, 1, 0)) df&lt;- df %&gt;% mutate(bien4=ifelse(F_11_4==1, 1, 0)) # crear variable con el total de bienes df$bienes&lt;- rowSums(subset(df, select=c(&quot;bien1&quot;, &quot;bien2&quot;, &quot;bien3&quot;, &quot;bien4&quot;))) b.4) homologar variables ####HOMOLOGAR CLASE DE VARIABLE df$educ&lt;-as.double(df$educ) df$ocup&lt;-as.double(df$ocup) df$bienes&lt;-as.character(df$bienes) 4.2.3 c. integrar la variable gse y generar recodificación # # unir categorías de gse en nuestra df de datos df&lt;-left_join(df,t_bienes,by=c(&quot;educ&quot;,&quot;bienes&quot;,&quot;ocup&quot;)) # recodificar gse df &lt;-df %&gt;% mutate(gse_rec = case_when(gse %in% c(&quot;AB&quot;,&quot;C1a&quot;,&quot;C1b&quot;) ~ &quot;Alto (AB+C1a+C1b)&quot;, gse %in% c(&quot;C2&quot;,&quot;C3&quot;) ~ &quot;Medio (C2+C3)&quot;, gse %in% c(&quot;D&quot;,&quot;E&quot;) ~ &quot;Bajo (D+E)&quot;, TRUE ~ &quot;Sin información&quot;)) Al realizar los pasos anteriores deberíamos contar con las siguientes variables y el gse construido .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-4baa5f54{}.cl-4b9c5f3a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4b9c8622{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4b9c8623{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4b9d21ea{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b9d21eb{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b9d21ec{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b9d21ed{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b9d21ee{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4b9d21ef{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} SbjNumocupeducgsegse_rec166,197,52165Sin información166,180,60633Sin información166,095,73633Sin información165,993,62914Sin información165,951,67054Sin información165,232,72434Sin información 4.2.4 d. exportar BBDD con clasificación socioeconómica ### OJO: quitar comentarios para guardar ### # save(df, # BBDD # file=&quot;MPlaza_pond_gse.Rdata&quot;) # Nombre library(tidyverse) "],["malla-de-validación.html", " 5 Malla de validación 5.1 Errores de valores perdidos 5.2 Errores de programación 5.3 Errores de consistencia", " 5 Malla de validación Una malla de validación permite revisar de manera automática la consistencia de la información proveniente de cada encuesta y los rangos de las respuestas, identificando de manera automática cuando un valor o respuesta específica no corresponda a un rango, previamente determinado, o cuando una respuesta sea inconsistente en relación a respuestas anteriores, según los saltos específicos de cada instrumento. Veremos como programar los siguientes tipos de errores: errores de valores perdidos, asociados a preguntas de respuesta obligatoria que se encuentren sin respuestas (missing); errores de programación, como saltos o filtros mal aplicados o preguntas de respuesta múltiples que carezcan de respuesta en al menos una opción; errores de consistencia, como datos fuera de rangos o extremos (datos que se escapan de los rangos, Ej: Edad.), y detectar inconsistencias lógicas en las respuestas de los participantes. Data a utilizar Para el ejercicio, se utilizará la base de datos de la Encuesta Nacional de Uso del Tiempo (ENUT) 2015. Se utilizarán dos versiones de dicha BBDD: una corregida tal como se puede descargar desde la pagina web del Instituto Nacional de Estadísticas y una alterada, en la que se introdujeron errores a propósito para ilustrar el funcionamiento de la malla de validación. Comenzaremos trabajando con la BBDD original library(haven) df &lt;- read_sav(&quot;BBDD/BASE_USUARIO_corregida.sav&quot;) Para descargar los datos hacer click en: Base corregida Base alterada 5.1 Errores de valores perdidos En primer lugar, se deberá verificar todas las variables que debieron a ser respondidas por todos los casos encuestados, no estando sujetas a saltos ni filtros de ningún tipo. Como se trata de preguntas obligatorias, por las que todos debieron haber pasado, querremos chequear que efectivamente haya sido así. Para eso, verificaremos que no hayan valores perdidas en dichas columnas. Para efectos de estandarizar, se utiliza la expresión ERRORMISSING_[variable]. Extra: creacion de un Id , puesto que esta BBDD no lo poseía. # creacion de Id df &lt;- df %&gt;% mutate(Id = paste0(id_vivienda, id_hogar, n_linea_h, id_persona, n_linea_p)) 5.1.1 a) selección de Id y variables de interés Para este paso solo debemos cambiar la BBDD y la selección de variables obligatorias para cada caso. Además del identificador de la persona o el folio de la encuesta, el cual siempre debe seleccionarse primero, antes de las variables. Es decir, se debe utilizar de la siguiente manera: data_perdidos &lt;- select(BBDD, c(Id, varX:varY)) # Seleccion de variables de interes # Para este paso debemos asegurarnos que la variable Id quede al inicio de la seleccion data_perdidos &lt;- select(df, #BBDD c(Id, 98:101)) # Id, variables. 5.1.2 b) casos perdidos por fila y columnas El siguiente loop nos entrega de manera automática dos objetos: data_perdidos = en él obtendremos un reporte que nos indicará las variables y el número de Id de la persona encuestada. De esta manera podremos identificar aquellos casos específicos donde se halle un caso perdido. reporte_errormissing = este objeto nos mostrará un conteo de errores totales por variable # Debemos asegurarnos que el loop comience con la columna 2, debido a que la 1 es el Id: i in 2:ncol. # Este loop se encuentra estandarizado. Si seguimos el paso anterior, no deberíamos tener # problemas con copiar y pegar el código. # OJO: en caso de cambiar el nombre de &quot;data_perdidos&quot; en el paso anterior, # debemos asegurarnos de actualizar el loop sobrescribiendo con ese nuevo # nombre. Por ello, es mejor mantener el nombre original. for (i in 2:ncol(data_perdidos)) { data_perdidos[,i] &lt;- ifelse(is.na(data_perdidos[i]), 1, 0) colnames(data_perdidos)[i]&lt;-paste(&quot;ERRORMISSING&quot;, names(data_perdidos)[i], sep = &quot;_&quot;) rep &lt;- data_perdidos %&gt;% select(starts_with(&quot;ERROR&quot;)) reporte_errormissing &lt;- tibble(variable = rep %&gt;% colnames) reporte_errormissing &lt;- reporte_errormissing %&gt;% mutate(errores = rep %&gt;% colSums(na.rm = TRUE)) #quitar el comentario siguiente si queremos que el reporte no muestre las variables con errores=0 #reporte_errormissing &lt;- reporte_errormissing[reporte_errormissing$errores &gt; 0,] rm(rep) } ### Opcional 1 ### # Si lo necesitamos, también podemos integrar los valores perdidos a la bbdd original # Para realizar este paso es importante contar con un Id, o alguna otra # variable en común entre los dos conjuntos de datos df &lt;- full_join(df, data_perdidos, by = &quot;Id&quot;) ### Opcional 2 ### # Si nos cuesta comprender los errores mediante la codificación 0 y 1, tenemos la opción # de recodificar estos parámetros a otros más intuitivos # data_perdidos&lt;-data_perdidos %&gt;% # mutate_at(c(2:ncol(data_perdidos)), recode, &#39;1&#39;=&#39;NA&#39;, &#39;0&#39;=&#39;Con Dato&#39;) 5.2 Errores de programación Por otra parte, nos interesará constatar que los saltos o filtros que contempla el cuestionario se encuentren bien aplicados, de manera que todos los encuestados hayan pasado por la secuencia lógica de preguntas que les correspondía. A modo de ejemplo, en el cuestionario ENUT, quienes respondieron que en sus hogares sí trabajó personal de servicio doméstico durante la semana anterior a aquella en la que fue aplicada la encuestada, debieron responder posteriormente la pregunta respecto a cuántas personas prestaron esos servicios en dicha vivienda. En este caso, vamos a denominarlos ERRORPRO_[n° consecutivo del error]. Por tanto, vamos a programar dos errores: ERRORPROG_1 = Si responde que la semana pasada SÍ trabajó personal servicio doméstico y luego no responde cuántas personas prestaron esos servicios; y al revés, ERRORPROG_2 = Si responde que la semana pasada NO trabajó personal servicio doméstico y luego responde cuántas personas trabajaron Lo anterior expresado de manera gráfica sería algo así: Pregunta filtro &gt; 1. Sí trabajó personal servicio doméstico; 2. No trabajó personal servicio doméstico. Pregunta llegada &gt; N° de personas que trabajaron P. Filtro P. Llegada Tipo de error 1 (responde que sí) 3 (debe responder y lo hace) Filtro correcto 1 (responde que sí) NA (debe responder y no lo hace) Error prog 1 2 (responde que no) 4 (no debe responder y lo hace) Error prog 2 NA (no responde) 2 (no debe responder y lo hace) Error prog 2 NA (no responde) NA (no debe responder y no lo hace) Caso perdido En esta ocasión, se utilizará la base de datos alterada (con errores) # cargar bbdd df &lt;- read_sav(&quot;BBDD/BASE_USUARIO_alterada.sav&quot;) # crear id (el mismo que el caso anterior) df &lt;- df %&gt;% mutate(Id = paste0(id_vivienda, id_hogar, n_linea_h, id_persona, n_linea_p)) 5.2.1 a) creación de excel y criterios de salto Para lograr automatizar el proceso, es necesario generar un excel con las siguientes características Donde: Salida: variable de filtro. Si tenemos una pregunta filtro que guía a otras múltiples preguntas, debemos repetir la variable filtro las veces necesarias, tal como se muestra en el ejemplo. Llegada: preguntas que debería contestar si se aplica el filtro. Criterio: valor que debe seleccionar la persona para que se haga efectivo el filtro. Este criterio puede establecerse por valores enteros o rangos: Criterio Secuencia Rangos Si responde 1, 2 o 3 debe responder las preguntas de llegada 1,2,3 1:3 Si responde 1 o 3 debe respondes las preguntas de llegada 1,3 No aplica En este sentido, el ejemplo se leería de la siguiente manera: si la persona responde sí en la pregunta f11_1_1, debe responder también la pregunta f12_1_1. A su vez, si responde sí en la pregunta f11_1_1, también debería resonder la pregunta f13_1_2 ¡IMPORTANTE: ES NECESARIO QUE LAS COLUMNAS DEL EXCEL SE ENCUENTREN EN FORMATO TEXTO! 5.2.2 b) aplicación del loop El loop que viene a continuación se encuentra automatizado. Si se han seguido correctamente los pasos anteriores y el excel se encuentra correctamente construido no deberían haber problemas en su ejecución. En este sentido, lo primero que debemos hacer es cargar nuestro excel con las preguntas listas. library(readxl) varsprog &lt;- read_xlsx(&quot;BBDD/ERRORPROG_EJ.xlsx&quot;) Luego, crearemos vectores específicos con los elementos provenientes de nuestro excel. # vectores de variables y criterios --------------------------------------- salida&lt;-c(varsprog$Salida) llegada&lt;-c(varsprog$Llegada) criterio.salto&lt;-c(varsprog$Criterio) criterio.salto&lt;- str_replace(criterio.salto, &quot;\\\\.&quot;, &quot;,&quot;) El siguiente paso es generar un nuevo objeto donde se almacenen los resultados del loop y que contenga el Id del encuestado, para poder así identificar el caso a caso. # la seleccion del Id puede cambiar segun BBDD. En este ejemplo el id se # llamada &quot;Id&quot;. ### OJO: si cambian el nombre de &quot;erroresprog&quot; deberán cambiarlo también dentro del loop ### erroresprog&lt;-data.frame(df$Id) Finalmente, ejecutamos el loop: # Creamos una funcion que servira para traducir en una secuencia de numeros imputs # como &quot;1 3&quot; o &quot;9&quot;. Para ambos casos devolver?a &quot;1 2 3&quot; y &quot;9&quot; respectivamente secuencia&lt;-function(objeto){ n&lt;-length(objeto) seq(objeto[[1]],objeto[[n]]) } # LOOP for (i in 1:length(salida)){ # 1ra parte, traducir en un rango de numeros imputs de caracteres como por ejemplo # &quot;2,5&quot; en los numeros &quot;2 5&quot;. imputs como &quot;1:3&quot;, en rangos &quot;1 2 3&quot;. Y unidades # como &quot;4&quot;, en el numero al que corresponden ifelse ((str_detect(criterio.salto[i],&quot;,&quot;)), rango&lt;- criterio.salto[i] %&gt;% str_split(&quot;,&quot;) %&gt;% unlist() %&gt;% as.numeric(), rango&lt;-criterio.salto[i] %&gt;% str_split(&quot;:&quot;) %&gt;% unlist() %&gt;% as.numeric() %&gt;% secuencia ) # Identifica la posicion en el data frame, de la variable/columna de salto coordenada1&lt;-grep(paste(&quot;^&quot;,salida[i],&quot;$&quot;,sep=&quot;&quot;), names(df)) # Identifica la posicion en el data frame, de la variable/columna de llegada coordenada2&lt;-grep(paste(&quot;^&quot;,llegada[i],&quot;$&quot;,sep=&quot;&quot;), names(df)) # Chequea si la variable de salto tiene obervaciones que cumplen la condicion # de salto s.check&lt;-((as.integer(unlist(df[,coordenada1]))) %in% rango)*1 # Chequea si la variable de llegada tiene obervaciones ll.check&lt;-(!is.na(df)[,coordenada2])*1 # Se pegan los resultados anteriores, que son agregados al a otro data frame # creado previamente, donde se registrar?n los resultados para cada individuo revision&lt;-paste0(s.check,ll.check) erroresprog&lt;-cbind(revision,erroresprog) rm(coordenada1, coordenada2, ll.check, s.check, rango, i, revision) } # Creamos un vector vacio para almacenar los nombres de las variables nombres.u&lt;-c() # Ingresamos los nombres de las columnas del data frame de revision, pegando los # nombres de las variables y salto llegada que correspondan, mas el criterio de salto for (i in 1:length(llegada)){ x1&lt;-paste0(salida[i],&quot;-&quot;,llegada[i], &quot; (&quot;,criterio.salto[i],&quot;)&quot;) nombres.u&lt;-append(nombres.u,x1) } rm(salida, llegada, criterio.salto, i, x1) # Reordenar base de datos de revision y añadir etiquetas erroresprog &lt;- rev(erroresprog) etiquetas &lt;- append(&quot;id&quot;, nombres.u) colnames(erroresprog)&lt;-etiquetas rm(etiquetas, nombres.u, secuencia) # Recodificar la nomenclatura de error para una mejor comprension erroresprog&lt;-erroresprog %&gt;% dplyr::mutate_at(c(2:ncol(erroresprog)), dplyr::recode, &#39;11&#39;=&#39;FILTRO_CORRECTO&#39;, &#39;10&#39;=&#39;ERRORPROG_1&#39;, &#39;01&#39;=&#39;ERRORPROG_2&#39;, &#39;00&#39;=&#39;VALOR_PERDIDO&#39;) Una vez tengamos los resultados del loop insertos en nuestro objeto erroresprog, podemos generar tablas de frecuecia que nos indiquen la cantidad de errores en las variables. Para ello utilizaremos la librería sjmisc y su función frq. library(sjmisc) # Para generar reportes solo pedimos de la frecuencia de las variables de interes # frq(errorprog$variable_x) frq(erroresprog$`f11_1_1-f12_1_1 (1)`) ## ## x &lt;character&gt; ## # total N=34575 valid N=34575 mean=3.97 sd=0.17 ## ## Value | N | Raw % | Valid % | Cum. % ## -------------------------------------------------- ## ERRORPROG_1 | 8 | 0.02 | 0.02 | 0.02 ## ERRORPROG_2 | 11 | 0.03 | 0.03 | 0.05 ## FILTRO_CORRECTO | 882 | 2.55 | 2.55 | 2.61 ## VALOR_PERDIDO | 33674 | 97.39 | 97.39 | 100.00 ## &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; Como vemos, tenemos 8 casos de Errorporg_1 y 11 con Errorprog_2 (aquellos que fueron alterados de forma manual en la BBDD para efectos del ejemplo). 5.3 Errores de consistencia Finalmente, verificaremos que no existan inconsistencias lógicas en las respuestas de los encuestados (por ejemplo: tener 21 años o menos y afirmar tener nivel educacional de magister o doctarado completo) o la existencia de valores fuera de rango en variables númericas (por ejemplo, variable de edad con casos menores de 18, si es que solo debían responderla mayores de edad). En este caso, vamos a denominarlos ERRORCON_[n° consecutivo del error]. A modo de ejemplo, primero programaremos un caso de respuestas inconsistentes. En este caso, se verificará que no haya casos su edad (c14_1_1) no sea consistente con su nivel educacional (d12_1_1). Para ello, se utilizará la BBDD alterada con errores. Como se observa en la tabla de salida, tenemos 6 errores con casos cuya edad es inferior a los 20 años, pero declaran poseer estudios de magíster o doctorado. ## Loading required package: grid ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack ## Loading required package: survival ## ## Attaching package: &#39;survey&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## dotchart "],["construcción-de-ponderadores-por-raking.html", " 6 Construcción de ponderadores por Raking 6.1 Cargar bases de datos necesarias 6.2 Chequeo de variables 6.3 Recodificaciones 6.4 Construcción del ponderador", " 6 Construcción de ponderadores por Raking La siguiente sección pretende ejemplificar la manera de construir un ponderador utilizando la nueva metodología empleada por el Instituto Nacional de Estadísticas de Chile (INE). Para más información sobre la metodología visitar el siguiente link El siguiente ejemplo pretende ponderar de acuerdo a las variables de: región, sexo, edad y educación. En este sentido, los valores que estimaremos como poblacionales de la región, el sexo y la edad los extraeremos de la BBDD de proyecciones del INE, mientras que los de educación los obtendremos desde la encuesta Casen 2020. Importante: para construir este tipo de ponderador es necesario utilizar la BBDD de estimaciones y proyecciones poblaciones del INE. Click aquí para descargar 6.1 Cargar bases de datos necesarias Para llevar a cabo la construcción del ponderador necesitamos los siguientes elementos: BBDD de trabajo, a la cual queremos asignar ponderaciones. BBDD seleccionadas por el analista. BBDD de proyecciones poblacionales a nivel país. Algo a tener en cuenta es que esta BBDD se actualiza año a año. # libreria library(haven) # BBDD de nuestro estudio (cambia segun caso) data1 &lt;- read_sav(&quot;BBDD/Base_final_DS2216_09_05_2022.sav&quot;, encoding = &quot;UTF-8&quot;) # BBDD para extraer ponderador de educacion (cambia segun caso) # Generalmente usamos CASEN 2017 O CASEN 2020 educ&lt;-read_sav(&quot;BBDD/Casen en Pandemia 2020_STATA PMulti.sav&quot;) # BBDD para construir las proyecciones (se actualiza año a año) proy &lt;- read_excel(&quot;BBDD/estimaciones-y-proyecciones-2002-2035-comunas.xlsx&quot;) 6.2 Chequeo de variables Como es costumbre, realizamos un primer análisis descriptivo de los datos para saber si debemos realizar recodificaciones o asignar valores perdidos. En este ejemplo emplearemos los siguientes códigos para realizar la labor, si embargo, la aplicación de determinadas librerías quedan a discreción del analista en cuestión. # Variables cualitativas # (sexo, nivel educacional y region) library(sjmisc) data1 %&gt;% frq(P1,P3,P4) # Variables cuantitativas # (edad) data1 %&gt;% sjmisc::descr(P2) 6.3 Recodificaciones Un requisito esencial para lograr construir el ponderador es que debemos homologar todas las variables que deseemos utilizar. Es decir, realizar todas las recodificaciones necesarias a las variables que extraeremos de las bases de datos externas, para que así presenten la misma composición y orden que las variables de nuestra base de datos de estudio. Estas recodificaciones son un elemento central en el cálculo de los ponderadores, pues con ellas lograremos asignar y reestructurar los pesos en caso de ser necesario. Importante: todas la recodificaciones que se presentan en el ejemplo responden a su contexto. Cualquier otra aplicación debe contener sus propias recodificaciones según el los objetivos del estudio. 6.3.1 Recodificación de variables en BBDD de estudio # sexo data1$P1&lt;-ifelse(data1$P1==1,&quot;Hombre&quot;,&quot;Mujer&quot;) # Recodificacion de edad en tramos (valida de emplear solo para variables numericas) data1&lt;-data1 %&gt;% mutate(edad_rec=case_when(between(P2,18,30)~ &quot;18 a 30 años&quot;, between(P2,31,40)~ &quot;31 a 40 años&quot;, between(P2,41,54)~ &quot;41 a 54 años&quot;, TRUE ~ &quot;55 años o más&quot;)) # renombrar variable region data1 &lt;- data1 %&gt;% dplyr::rename(&quot;region&quot; = &quot;P4&quot;) # educacion data1$P3&lt;-as.numeric(data1$P3) data1&lt;-data1 %&gt;% mutate(educ_rec=case_when(between(P3,1,5)~ &quot;humanidades completa o menos&quot;, between(P3,6,8)~ &quot;CFT inc-Universidad inc&quot;, TRUE ~ &quot;Universitaria completa o superior&quot;)) data1$educ_rec&lt;-factor(data1$educ_rec, levels = c(&quot;humanidades completa o menos&quot;, &quot;CFT inc-Universidad inc&quot;, &quot;Universitaria completa o superior&quot;)) # edad_Sexo data1$edad_sexo&lt;-paste0(data1$P1,&quot; &quot;,data1$edad_rec) data1$edad_sexo&lt;-as.character(data1$edad_sexo) data1$edad_sexo&lt;-factor(data1$edad_sexo, levels = c( &quot;Hombre 18 a 30 años&quot;, &quot;Hombre 31 a 40 años&quot;, &quot;Hombre 41 a 54 años&quot;, &quot;Hombre 55 años o más&quot;, &quot;Mujer 18 a 30 años&quot;, &quot;Mujer 31 a 40 años&quot;, &quot;Mujer 41 a 54 años&quot;, &quot;Mujer 55 años o más&quot;)) 6.3.2 Recodificaciones en BBDD de proyecciones pobalcionales # seleccionar variables de interes proy&lt;-proy[,c( &quot;Nombre Region&quot;, &quot;Sexo\\r\\n1=Hombre\\r\\n2=Mujer&quot;, &quot;Edad&quot;, &quot;Poblacion 2021&quot;)] # renombrar variable sexo proy &lt;- proy %&gt;% dplyr::rename(&quot;sexo&quot; = &quot;Sexo\\r\\n1=Hombre\\r\\n2=Mujer&quot;) # recodificar regiones proy$region &lt;- case_when(proy$`Nombre Region`==&quot;Tarapacá&quot; ~ 1, proy$`Nombre Region`==&quot;Antofagasta&quot; ~ 2, proy$`Nombre Region`==&quot;Atacama&quot; ~ 3, proy$`Nombre Region`==&quot;Coquimbo&quot; ~ 4, proy$`Nombre Region`==&quot;Valparaíso&quot; ~ 5, proy$`Nombre Region`==&quot;Libertador General Bernardo O&#39;Higgins&quot; ~ 6, proy$`Nombre Region`==&quot;Maule&quot; ~ 7, proy$`Nombre Region`==&quot;Biobío&quot; ~ 8, proy$`Nombre Region`==&quot;La Araucanía&quot; ~ 9, proy$`Nombre Region`==&quot;Los Lagos&quot; ~ 10, proy$`Nombre Region`==&quot;Aysén del General Carlos Ibáñez del Campo&quot; ~ 11, proy$`Nombre Region`==&quot;Magallanes y de la Antártica Chilena&quot; ~ 12, proy$`Nombre Region`==&quot;Metropolitana de Santiago&quot; ~ 13, proy$`Nombre Region`==&quot;Los Ríos&quot; ~ 14, proy$`Nombre Region`==&quot;Arica y Parinacota&quot; ~ 15, proy$`Nombre Region`==&quot;Ñuble&quot; ~ 16) 6.3.3 Proyecciones poblacionales mayores a 18 años # REGION proy.18&lt;-proy %&gt;% filter(Edad&gt;=18) %&gt;% select(&quot;Nombre Region&quot;,&quot;Poblacion 2021&quot;) # conteo de poblacion mayor de 18 años por region proy.18&lt;-proy.18 %&gt;% dplyr::group_by(`Nombre Region`) %&gt;% dplyr::summarise(n=sum(`Poblacion 2021`)) # proporcion de personas mayores de 18 años por region proy.18$porcentaje&lt;-proy.18$n/sum(proy.18$n) # homologar recodificacion segun bbdd de estudio proy.18$orden &lt;- case_when(proy.18$`Nombre Region`==&quot;Tarapacá&quot; ~ 1, proy.18$`Nombre Region`==&quot;Antofagasta&quot; ~ 2, proy.18$`Nombre Region`==&quot;Atacama&quot; ~ 3, proy.18$`Nombre Region`==&quot;Coquimbo&quot; ~ 4, proy.18$`Nombre Region`==&quot;Valparaíso&quot; ~ 5, proy.18$`Nombre Region`==&quot;Libertador General Bernardo O&#39;Higgins&quot; ~ 6, proy.18$`Nombre Region`==&quot;Maule&quot; ~ 7, proy.18$`Nombre Region`==&quot;Biobío&quot; ~ 8, proy.18$`Nombre Region`==&quot;La Araucanía&quot; ~ 9, proy.18$`Nombre Region`==&quot;Los Lagos&quot; ~ 10, proy.18$`Nombre Region`==&quot;Aysén del General Carlos Ibáñez del Campo&quot; ~ 11, proy.18$`Nombre Region`==&quot;Magallanes y de la Antártica Chilena&quot; ~ 12, proy.18$`Nombre Region`==&quot;Metropolitana de Santiago&quot; ~ 13, proy.18$`Nombre Region`==&quot;Los Ríos&quot; ~ 14, proy.18$`Nombre Region`==&quot;Arica y Parinacota&quot; ~ 15, proy.18$`Nombre Region`==&quot;Ñuble&quot; ~ 16) # ordenar de forma ascendente proy.18&lt;-proy.18[order(proy.18$orden),] # ordenar de forma descendente #proy.18$orden &lt;- proy.18 %&gt;% dplyr::arrange(desc(orden)) # SEXO Y EDAD proy.18.se&lt;-proy %&gt;% filter(Edad&gt;=18) # homologamos la variable sexo con la distribucion de la bbdd de estudio proy.18.se$sexo&lt;-ifelse(proy.18.se$sexo==1,&quot;Hombre&quot;,&quot;Mujer&quot;) # homologamos la recodificacion de nuestra bbdd de estudio proy.18.se&lt;-proy.18.se %&gt;% mutate(edad_rec=case_when(between(Edad,18,30)~ &quot;18 a 30 años&quot;, between(Edad,31,40)~ &quot;31 a 40 años&quot;, between(Edad,41,54)~ &quot;41 a 54 años&quot;, TRUE ~ &quot;55 años o más&quot;)) # frecuencia absoluta proy.18.se&lt;-proy.18.se %&gt;% dplyr::group_by(edad_rec,sexo) %&gt;% dplyr::summarise(n=sum(`Poblacion 2021`)) # proy.18.se&lt;-proy.18.se %&gt;% ungroup() # remueve agrupacion # frecuencia relativa proy.18.se$porcentaje&lt;-proy.18.se$n/sum(proy.18.se$n) # unir sexo y edad en una sola variablepro proy.18.se$edad_sexo&lt;-paste0(proy.18.se$sexo,&quot; &quot;,proy.18.se$edad_rec) 6.3.4 Recodificación BBDD Casen 2020 # NIVEL EDCUCACIONAL # seleccionamos los casos mayores a 18 años educ&lt;-educ %&gt;% filter(edad&gt;=18) # nuevo dataframe con educacion y personas mayores a 18 años educ1&lt;-educ %&gt;% select(educ) # transformacion de la variable a numérica educ1$educ&lt;-as.numeric(educ1$educ) # eliminamos los valores perdidos codificados como 99 educ1&lt;-educ1 %&gt;% filter(educ&lt;99) # recodificacion homologa de la variable educ1&lt;-educ1 %&gt;% mutate(educ_rec=case_when(between(educ,0,6)~ &quot;humanidades completa o menos&quot;, between(educ,7,9)~ &quot;CFT inc-Universidad inc&quot;, TRUE ~ &quot;Universitaria completa o superior&quot;)) # asigancion del orden de las categorias educ1$educ_rec&lt;-factor(educ1$educ_rec, levels = c(&quot;humanidades completa o menos&quot;, &quot;CFT inc-Universidad inc&quot;, &quot;Universitaria completa o superior&quot;)) ## creacion tabla de proporciones ## # a. nombres educacion.n&lt;-data.frame(names(table(educ1$educ_rec))) # b. proporciones educacion.n$prop&lt;-as.vector(prop.table(table(educ1$educ_rec))) # c. nombre de primera variable names(educacion.n)[1]=&quot;educ&quot; # d. asignacion de categorias educacion.n$educ &lt;-factor(educacion.n$educ, levels = c(&quot;humanidades completa o menos&quot;, &quot;CFT inc-Universidad inc&quot;, &quot;Universitaria completa o superior&quot;)) 6.4 Construcción del ponderador 6.4.1 Creación de un objeto sin pesos El argumento ids se utiliza para decirle a la encuesta que todos los datos provienen de una sola unidad primaria de muestreo. En data debemos agregar nuestra BBDD original. library(survey) dummy_survey_unweighted &lt;- svydesign(ids = ~1, data = data1, weights = NULL) 6.4.2 Crear las distribuciones marginales poblacionales de cada variable a utilizar para ponderar Aquí agregar todas las distribuciones marginales de todas las variables que se desean ponderar. Cada marco de datos consta de dos vectores: uno que describe los niveles del factor asociado y el otro las frecuencias correspondientes. Tenga en cuenta que multiplicamos las frecuencias relativas teóricamente conocidas como las hemos obtenido de nuestra población de referencia con el número de filas en el conjunto de datos para el que calculamos los pesos, para obtener frecuencias absolutas. El nombre del vector que describe los niveles del factor, tiene que ser el mismo nombre que tiene la variable en la bbdd y la misma codificación del factor en la base de datos original. Verificar que los nombres de la base en comuna, estén en el mismo orden que en la base proy.18. Para el ejemplo: como no tienen el mismo orden de levels ordenaré BBDD$REGION EN BASE A LO QUE APARECE EN LAS PROYECCIONES ¿Cómo se calcula? Para calcular estas distribuciones marginales debemos multiplicar el número total de casos de nuestra BBDD de estudio por la frecuencia relativa de las variables externas. # REGION # dist. marginal reg_dist &lt;- tibble(region = c(names(table(data1$region))), Freq = nrow(data1)*c(proy.18$porcentaje)) # SEXO_EDAD # ordenar variables proy.18.se&lt;-proy.18.se[order(proy.18.se$edad_sexo),] # dist. marginal gender_edad_dist &lt;- tibble(edad_sexo = c(names(table(proy.18.se$edad_sexo))), Freq = nrow(data1)*c(proy.18.se$porcentaje)) # EDUCACION # ordenar variables data1&lt;-data1[order(data1$educ_rec),] # dist. marginal nivel_educ_dist&lt;-tibble(educ_rec = c(names(table(educacion.n$educ))), Freq = nrow(data1)*c(educacion.n$prop)) 6.4.3 Cáluclo del ponderador # CALCULO DE PONDERACIONES dummy_gender_rake &lt;- survey::rake(design = dummy_survey_unweighted, # objeto sin pesos sample.margins = list(~edad_sexo, # variables a extraer ~region, ~educ_rec), population.margins = list(gender_edad_dist, # objetos de donde reg_dist, # se extraen las nivel_educ_dist)) # variables ### ¡OJO, deben tener le mismo orden! # si quiero las variables edad_sexo, region y educ_rec, debo asegurarme que # el orden de los objetos debe seguir la misma logica, de esta manera R # &quot;sabra donde buscar&quot; para encontrar tales variables ## Comprobamos que los ponderadores esten bien construidos # como convención, los valores deben ser mayores a 0.3 (Min) y menores a 3 (Max) summary(weights(dummy_gender_rake)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.2457 0.5346 0.8631 1.0000 1.4661 2.2611 ## En caso que no oscilen entre estos valores tenemos dos opciones: # 1) volver a los pasos anteriores y recodificar de tal manera que los pesos # tomen el rango deseado (recomendado). # 2) utilizar el siguiente codigo, el cual fuerza un recorte de los ponderadores # de acuerdo al rango que le asignemos. # dummy_gender_rake.rake.trim &lt;- # nuevo objeto con ponderadores forzados # trimWeights(dummy_gender_rake, # objeto con ponderadores # lower=0.3, # rango: minimo # upper=3, # rango: maximo # strict=TRUE) # forzar la funcion # Pasar los pesos a la bbdd original data1$Pond&lt;-weights(dummy_gender_rake) # asegurarse que la suma de los puntajes de los ponderadores sean igual al # n muestral data1$Pond %&gt;% sum() ## [1] 1000 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
